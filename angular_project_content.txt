CONTENIDO COMPLETO DEL PROYECTO ANGULAR
======================================
Proyecto: /Users/joelcespedes/Desktop/residences/admin-residences
Generado: 2025-09-06 17:56:19
======================================


ESTRUCTURA DE DIRECTORIOS DEL PROYECTO
=====================================

ÁRBOL COMPLETO:
===============
[0;34mGenerando árbol con comando 'tree'[0m
/Users/joelcespedes/Desktop/residences/admin-residences
├── projects
│   └── core
│       ├── src
│       │   ├── lib
│       │   │   ├── guards
│       │   │   │   ├── auth.guard.ts
│       │   │   │   ├── residence.guard.ts
│       │   │   │   └── role.guard.ts
│       │   │   ├── interceptors
│       │   │   │   ├── auth.interceptor.ts
│       │   │   │   └── residence.interceptor.ts
│       │   │   ├── services
│       │   │   │   ├── auth.service.ts
│       │   │   │   ├── base-crud.service.ts
│       │   │   │   ├── residence.service.ts
│       │   │   │   └── residents-data.service.ts
│       │   │   └── index.ts
│       │   └── public-api.ts
│       ├── ng-package.json
│       ├── package.json
│       ├── README.md
│       ├── tsconfig.lib.json
│       ├── tsconfig.lib.prod.json
│       └── tsconfig.spec.json
├── public
│   └── favicon.ico
├── src
│   ├── app
│   │   ├── dashboard
│   │   │   ├── dashboard.html
│   │   │   ├── dashboard.scss
│   │   │   └── dashboard.ts
│   │   ├── app.config.ts
│   │   ├── app.html
│   │   ├── app.routes.ts
│   │   ├── app.scss
│   │   ├── app.spec.ts
│   │   └── app.ts
│   ├── environments
│   │   ├── environment.development.ts
│   │   └── environment.ts
│   ├── openapi
│   │   ├── generated
│   │   │   ├── fn
│   │   │   │   ├── auth
│   │   │   │   │   └── login-auth-login-post.ts
│   │   │   │   ├── devices
│   │   │   │   │   ├── create-device-devices-post.ts
│   │   │   │   │   └── list-devices-devices-get.ts
│   │   │   │   ├── measurements
│   │   │   │   │   ├── create-measurement-measurements-post.ts
│   │   │   │   │   ├── delete-measurement-measurements-measurement-id-delete.ts
│   │   │   │   │   ├── get-measurement-measurements-measurement-id-get.ts
│   │   │   │   │   ├── list-measurements-measurements-get.ts
│   │   │   │   │   └── update-measurement-measurements-measurement-id-patch.ts
│   │   │   │   ├── operations
│   │   │   │   │   ├── me-auth-me-get.ts
│   │   │   │   │   └── root-get.ts
│   │   │   │   ├── residences
│   │   │   │   │   ├── get-residence-residences-residence-id-get.ts
│   │   │   │   │   ├── list-residences-residences-get.ts
│   │   │   │   │   └── my-residences-residences-mine-get.ts
│   │   │   │   ├── residents
│   │   │   │   │   ├── change-bed-residents-resident-id-bed-patch.ts
│   │   │   │   │   ├── create-resident-residents-post.ts
│   │   │   │   │   └── list-residents-residents-get.ts
│   │   │   │   ├── structure
│   │   │   │   │   ├── beds-structure-beds-room-id-get.ts
│   │   │   │   │   ├── floors-structure-floors-residence-id-get.ts
│   │   │   │   │   └── rooms-structure-rooms-floor-id-get.ts
│   │   │   │   ├── tags
│   │   │   │   │   └── list-tags-tags-get.ts
│   │   │   │   └── tasks
│   │   │   │       ├── apply-task-tasks-applications-post.ts
│   │   │   │       ├── create-category-tasks-categories-post.ts
│   │   │   │       ├── create-template-tasks-templates-post.ts
│   │   │   │       ├── delete-application-tasks-applications-application-id-delete.ts
│   │   │   │       ├── delete-category-tasks-categories-category-id-delete.ts
│   │   │   │       ├── delete-template-tasks-templates-template-id-delete.ts
│   │   │   │       ├── list-applications-tasks-applications-get.ts
│   │   │   │       ├── list-categories-tasks-categories-get.ts
│   │   │   │       ├── list-templates-tasks-templates-get.ts
│   │   │   │       ├── update-application-tasks-applications-application-id-patch.ts
│   │   │   │       ├── update-category-tasks-categories-category-id-patch.ts
│   │   │   │       └── update-template-tasks-templates-template-id-patch.ts
│   │   │   ├── models
│   │   │   │   ├── device-create.ts
│   │   │   │   ├── device-out.ts
│   │   │   │   ├── http-validation-error.ts
│   │   │   │   ├── login-request.ts
│   │   │   │   ├── measurement-create.ts
│   │   │   │   ├── measurement-out.ts
│   │   │   │   ├── measurement-update.ts
│   │   │   │   ├── resident-change-bed.ts
│   │   │   │   ├── resident-create.ts
│   │   │   │   ├── resident-out.ts
│   │   │   │   ├── task-application-create.ts
│   │   │   │   ├── task-application-out.ts
│   │   │   │   ├── task-application-update.ts
│   │   │   │   ├── task-category-create.ts
│   │   │   │   ├── task-category-out.ts
│   │   │   │   ├── task-category-update.ts
│   │   │   │   ├── task-template-create.ts
│   │   │   │   ├── task-template-out.ts
│   │   │   │   ├── task-template-update.ts
│   │   │   │   ├── token-response.ts
│   │   │   │   └── validation-error.ts
│   │   │   ├── services
│   │   │   │   ├── api.service.ts
│   │   │   │   ├── auth.service.ts
│   │   │   │   ├── devices.service.ts
│   │   │   │   ├── measurements.service.ts
│   │   │   │   ├── residences.service.ts
│   │   │   │   ├── residents.service.ts
│   │   │   │   ├── structure.service.ts
│   │   │   │   ├── tags.service.ts
│   │   │   │   └── tasks.service.ts
│   │   │   ├── api-configuration.ts
│   │   │   ├── base-service.ts
│   │   │   ├── index.ts
│   │   │   ├── models.ts
│   │   │   ├── request-builder.ts
│   │   │   ├── services.ts
│   │   │   └── strict-http-response.ts
│   │   └── api-config.provider.ts
│   ├── index.html
│   ├── main.ts
│   └── styles.scss
├── angular_project_content.txt
├── angular.json
├── ng-openapi-gen.json
├── package-lock.json
├── package.json
├── README.md
├── run.sh
├── tsconfig.app.json
├── tsconfig.json
└── tsconfig.spec.json

27 directories, 112 files

LIBRERÍAS (projects/):
=====================
[0;34mGenerando árbol con comando 'tree'[0m
/Users/joelcespedes/Desktop/residences/admin-residences/projects
└── core
    ├── src
    │   ├── lib
    │   │   ├── guards
    │   │   │   ├── auth.guard.ts
    │   │   │   ├── residence.guard.ts
    │   │   │   └── role.guard.ts
    │   │   ├── interceptors
    │   │   │   ├── auth.interceptor.ts
    │   │   │   └── residence.interceptor.ts
    │   │   ├── services
    │   │   │   ├── auth.service.ts
    │   │   │   ├── base-crud.service.ts
    │   │   │   ├── residence.service.ts
    │   │   │   └── residents-data.service.ts
    │   │   └── index.ts
    │   └── public-api.ts
    ├── ng-package.json
    ├── package.json
    ├── README.md
    ├── tsconfig.lib.json
    ├── tsconfig.lib.prod.json
    └── tsconfig.spec.json

7 directories, 17 files

=====================================

================================================================================
ARCHIVO: angular.json
UBICACIÓN EN ÁRBOL: / (raíz del proyecto)
================================================================================
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "admin-residences": {
      "projectType": "application",
      "schematics": {
        "@schematics/angular:component": {
          "style": "scss"
        }
      },
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular/build:application",
          "options": {
            "browser": "src/main.ts",
            "polyfills": [
              "zone.js"
            ],
            "tsConfig": "tsconfig.app.json",
            "inlineStyleLanguage": "scss",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "src/styles.scss"
            ]
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kB",
                  "maximumError": "1MB"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "4kB",
                  "maximumError": "8kB"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true,
              "fileReplacements": [
                {
                  "replace": "src/environments/environment.ts",
                  "with": "src/environments/environment.development.ts"
                }
              ]
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular/build:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "admin-residences:build:production"
            },
            "development": {
              "buildTarget": "admin-residences:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular/build:extract-i18n"
        },
        "test": {
          "builder": "@angular/build:karma",
          "options": {
            "polyfills": [
              "zone.js",
              "zone.js/testing"
            ],
            "tsConfig": "tsconfig.spec.json",
            "inlineStyleLanguage": "scss",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "src/styles.scss"
            ]
          }
        }
      }
    },
    "core": {
      "projectType": "library",
      "root": "projects/core",
      "sourceRoot": "projects/core/src",
      "prefix": "lib",
      "architect": {
        "build": {
          "builder": "@angular/build:ng-packagr",
          "configurations": {
            "production": {
              "tsConfig": "projects/core/tsconfig.lib.prod.json"
            },
            "development": {
              "tsConfig": "projects/core/tsconfig.lib.json"
            }
          },
          "defaultConfiguration": "production"
        },
        "test": {
          "builder": "@angular/build:karma",
          "options": {
            "tsConfig": "projects/core/tsconfig.spec.json",
            "polyfills": [
              "zone.js",
              "zone.js/testing"
            ]
          }
        }
      }
    }
  }
}


################################################################################
#                           APLICACIÓN PRINCIPAL (src/)                        #
################################################################################

================================================================================
ARCHIVO: src/app/app.config.ts
UBICACIÓN EN ÁRBOL: src/app/
================================================================================
import {
  ApplicationConfig,
  provideBrowserGlobalErrorListeners,
  provideZoneChangeDetection,
} from '@angular/core';
import { provideRouter } from '@angular/router';

import { routes } from './app.routes';
import { provideHttpClient, withInterceptors } from '@angular/common/http';
import { provideAnimationsAsync } from '@angular/platform-browser/animations/async';
import { authInterceptor, residenceInterceptor } from '@core';
import { provideApiConfiguration } from '../openapi/api-config.provider';

export const appConfig: ApplicationConfig = {
  providers: [
    provideBrowserGlobalErrorListeners(),
    provideZoneChangeDetection({ eventCoalescing: true }),
    provideRouter(routes),
    provideHttpClient(withInterceptors([authInterceptor, residenceInterceptor])),
    provideAnimationsAsync(),
    provideApiConfiguration(),
  ],
};

================================================================================
ARCHIVO: src/app/app.html
UBICACIÓN EN ÁRBOL: src/app/
================================================================================
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- * * * * * * * * * * * The content below * * * * * * * * * * * -->
<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * -->
<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- * * * * * * * * * Delete the template below * * * * * * * * * -->
<!-- * * * * * * * to get started with your project! * * * * * * * -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->

<style>
  :host {
    --bright-blue: oklch(51.01% 0.274 263.83);
    --electric-violet: oklch(53.18% 0.28 296.97);
    --french-violet: oklch(47.66% 0.246 305.88);
    --vivid-pink: oklch(69.02% 0.277 332.77);
    --hot-red: oklch(61.42% 0.238 15.34);
    --orange-red: oklch(63.32% 0.24 31.68);

    --gray-900: oklch(19.37% 0.006 300.98);
    --gray-700: oklch(36.98% 0.014 302.71);
    --gray-400: oklch(70.9% 0.015 304.04);

    --red-to-pink-to-purple-vertical-gradient: linear-gradient(
      180deg,
      var(--orange-red) 0%,
      var(--vivid-pink) 50%,
      var(--electric-violet) 100%
    );

    --red-to-pink-to-purple-horizontal-gradient: linear-gradient(
      90deg,
      var(--orange-red) 0%,
      var(--vivid-pink) 50%,
      var(--electric-violet) 100%
    );

    --pill-accent: var(--bright-blue);

    font-family: "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
      Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
      "Segoe UI Symbol";
    box-sizing: border-box;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  h1 {
    font-size: 3.125rem;
    color: var(--gray-900);
    font-weight: 500;
    line-height: 100%;
    letter-spacing: -0.125rem;
    margin: 0;
    font-family: "Inter Tight", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
      Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
      "Segoe UI Symbol";
  }

  p {
    margin: 0;
    color: var(--gray-700);
  }

  main {
    width: 100%;
    min-height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 1rem;
    box-sizing: inherit;
    position: relative;
  }

  .angular-logo {
    max-width: 9.2rem;
  }

  .content {
    display: flex;
    justify-content: space-around;
    width: 100%;
    max-width: 700px;
    margin-bottom: 3rem;
  }

  .content h1 {
    margin-top: 1.75rem;
  }

  .content p {
    margin-top: 1.5rem;
  }

  .divider {
    width: 1px;
    background: var(--red-to-pink-to-purple-vertical-gradient);
    margin-inline: 0.5rem;
  }

  .pill-group {
    display: flex;
    flex-direction: column;
    align-items: start;
    flex-wrap: wrap;
    gap: 1.25rem;
  }

  .pill {
    display: flex;
    align-items: center;
    --pill-accent: var(--bright-blue);
    background: color-mix(in srgb, var(--pill-accent) 5%, transparent);
    color: var(--pill-accent);
    padding-inline: 0.75rem;
    padding-block: 0.375rem;
    border-radius: 2.75rem;
    border: 0;
    transition: background 0.3s ease;
    font-family: var(--inter-font);
    font-size: 0.875rem;
    font-style: normal;
    font-weight: 500;
    line-height: 1.4rem;
    letter-spacing: -0.00875rem;
    text-decoration: none;
    white-space: nowrap;
  }

  .pill:hover {
    background: color-mix(in srgb, var(--pill-accent) 15%, transparent);
  }

  .pill-group .pill:nth-child(6n + 1) {
    --pill-accent: var(--bright-blue);
  }
  .pill-group .pill:nth-child(6n + 2) {
    --pill-accent: var(--electric-violet);
  }
  .pill-group .pill:nth-child(6n + 3) {
    --pill-accent: var(--french-violet);
  }

  .pill-group .pill:nth-child(6n + 4),
  .pill-group .pill:nth-child(6n + 5),
  .pill-group .pill:nth-child(6n + 6) {
    --pill-accent: var(--hot-red);
  }

  .pill-group svg {
    margin-inline-start: 0.25rem;
  }

  .social-links {
    display: flex;
    align-items: center;
    gap: 0.73rem;
    margin-top: 1.5rem;
  }

  .social-links path {
    transition: fill 0.3s ease;
    fill: var(--gray-400);
  }

  .social-links a:hover svg path {
    fill: var(--gray-900);
  }

  @media screen and (max-width: 650px) {
    .content {
      flex-direction: column;
      width: max-content;
    }

    .divider {
      height: 1px;
      width: 100%;
      background: var(--red-to-pink-to-purple-horizontal-gradient);
      margin-block: 1.5rem;
    }
  }
</style>

<main class="main">
  <div class="content">
    <div class="left-side">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 982 239"
        fill="none"
        class="angular-logo"
      >
        <g clip-path="url(#a)">
          <path
            fill="url(#b)"
            d="M388.676 191.625h30.849L363.31 31.828h-35.758l-56.215 159.797h30.848l13.174-39.356h60.061l13.256 39.356Zm-65.461-62.675 21.602-64.311h1.227l21.602 64.311h-44.431Zm126.831-7.527v70.202h-28.23V71.839h27.002v20.374h1.392c2.782-6.71 7.2-12.028 13.255-15.956 6.056-3.927 13.584-5.89 22.503-5.89 8.264 0 15.465 1.8 21.684 5.318 6.137 3.518 10.964 8.673 14.319 15.382 3.437 6.71 5.074 14.81 4.992 24.383v76.175h-28.23v-71.92c0-8.019-2.046-14.237-6.219-18.819-4.173-4.5-9.819-6.791-17.102-6.791-4.91 0-9.328 1.063-13.174 3.272-3.846 2.128-6.792 5.237-9.001 9.328-2.046 4.009-3.191 8.918-3.191 14.728ZM589.233 239c-10.147 0-18.82-1.391-26.103-4.091-7.282-2.7-13.092-6.382-17.511-10.964-4.418-4.582-7.528-9.655-9.164-15.219l25.448-6.136c1.145 2.372 2.782 4.663 4.991 6.954 2.209 2.291 5.155 4.255 8.837 5.81 3.683 1.554 8.428 2.291 14.074 2.291 8.019 0 14.647-1.964 19.884-5.81 5.237-3.845 7.856-10.227 7.856-19.064v-22.665h-1.391c-1.473 2.946-3.601 5.892-6.383 9.001-2.782 3.109-6.464 5.645-10.965 7.691-4.582 2.046-10.228 3.109-17.101 3.109-9.165 0-17.511-2.209-25.039-6.545-7.446-4.337-13.42-10.883-17.757-19.474-4.418-8.673-6.628-19.473-6.628-32.565 0-13.091 2.21-24.301 6.628-33.383 4.419-9.082 10.311-15.955 17.839-20.7 7.528-4.746 15.874-7.037 25.039-7.037 7.037 0 12.846 1.145 17.347 3.518 4.582 2.373 8.182 5.236 10.883 8.51 2.7 3.272 4.746 6.382 6.137 9.327h1.554v-19.8h27.821v121.749c0 10.228-2.454 18.737-7.364 25.447-4.91 6.709-11.538 11.7-20.048 15.055-8.509 3.355-18.165 4.991-28.884 4.991Zm.245-71.266c5.974 0 11.047-1.473 15.302-4.337 4.173-2.945 7.446-7.118 9.573-12.519 2.21-5.482 3.274-12.027 3.274-19.637 0-7.609-1.064-14.155-3.274-19.8-2.127-5.646-5.318-10.064-9.491-13.255-4.174-3.11-9.329-4.746-15.384-4.746s-11.537 1.636-15.792 4.91c-4.173 3.272-7.365 7.772-9.492 13.418-2.128 5.727-3.191 12.191-3.191 19.392 0 7.2 1.063 13.745 3.273 19.228 2.127 5.482 5.318 9.736 9.573 12.764 4.174 3.027 9.41 4.582 15.629 4.582Zm141.56-26.51V71.839h28.23v119.786h-27.412v-21.273h-1.227c-2.7 6.709-7.119 12.191-13.338 16.446-6.137 4.255-13.747 6.382-22.748 6.382-7.855 0-14.81-1.718-20.783-5.237-5.974-3.518-10.72-8.591-14.075-15.382-3.355-6.709-5.073-14.891-5.073-24.464V71.839h28.312v71.921c0 7.609 2.046 13.664 6.219 18.083 4.173 4.5 9.655 6.709 16.365 6.709 4.173 0 8.183-.982 12.111-3.028 3.927-2.045 7.118-5.072 9.655-9.082 2.537-4.091 3.764-9.164 3.764-15.218Zm65.707-109.395v159.796h-28.23V31.828h28.23Zm44.841 162.169c-7.61 0-14.402-1.391-20.457-4.091-6.055-2.7-10.883-6.791-14.32-12.109-3.518-5.319-5.237-11.946-5.237-19.801 0-6.791 1.228-12.355 3.765-16.773 2.536-4.419 5.891-7.937 10.228-10.637 4.337-2.618 9.164-4.664 14.647-6.055 5.4-1.391 11.046-2.373 16.856-3.027 7.037-.737 12.683-1.391 17.102-1.964 4.337-.573 7.528-1.555 9.574-2.782 1.963-1.309 3.027-3.273 3.027-5.973v-.491c0-5.891-1.718-10.391-5.237-13.664-3.518-3.191-8.51-4.828-15.056-4.828-6.955 0-12.356 1.473-16.447 4.5-4.009 3.028-6.71 6.546-8.183 10.719l-26.348-3.764c2.046-7.282 5.483-13.336 10.31-18.328 4.746-4.909 10.638-8.59 17.511-11.045 6.955-2.455 14.565-3.682 22.912-3.682 5.809 0 11.537.654 17.265 2.045s10.965 3.6 15.711 6.71c4.746 3.109 8.51 7.282 11.455 12.6 2.864 5.318 4.337 11.946 4.337 19.883v80.184h-27.166v-16.446h-.9c-1.719 3.355-4.092 6.464-7.201 9.328-3.109 2.864-6.955 5.237-11.619 6.955-4.828 1.718-10.229 2.536-16.529 2.536Zm7.364-20.701c5.646 0 10.556-1.145 14.729-3.354 4.173-2.291 7.364-5.237 9.655-9.001 2.292-3.763 3.355-7.854 3.355-12.273v-14.155c-.9.737-2.373 1.391-4.5 2.046-2.128.654-4.419 1.145-7.037 1.636-2.619.491-5.155.9-7.692 1.227-2.537.328-4.746.655-6.628.901-4.173.572-8.019 1.472-11.292 2.781-3.355 1.31-5.973 3.11-7.855 5.401-1.964 2.291-2.864 5.318-2.864 8.918 0 5.237 1.882 9.164 5.728 11.782 3.682 2.782 8.51 4.091 14.401 4.091Zm64.643 18.328V71.839h27.412v19.965h1.227c2.21-6.955 5.974-12.274 11.292-16.038 5.319-3.763 11.456-5.645 18.329-5.645 1.555 0 3.355.082 5.237.163 1.964.164 3.601.328 4.91.573v25.938c-1.227-.41-3.109-.819-5.646-1.146a58.814 58.814 0 0 0-7.446-.49c-5.155 0-9.738 1.145-13.829 3.354-4.091 2.209-7.282 5.236-9.655 9.164-2.373 3.927-3.519 8.427-3.519 13.5v70.448h-28.312ZM222.077 39.192l-8.019 125.923L137.387 0l84.69 39.192Zm-53.105 162.825-57.933 33.056-57.934-33.056 11.783-28.556h92.301l11.783 28.556ZM111.039 62.675l30.357 73.803H80.681l30.358-73.803ZM7.937 165.115 0 39.192 84.69 0 7.937 165.115Z"
          />
          <path
            fill="url(#c)"
            d="M388.676 191.625h30.849L363.31 31.828h-35.758l-56.215 159.797h30.848l13.174-39.356h60.061l13.256 39.356Zm-65.461-62.675 21.602-64.311h1.227l21.602 64.311h-44.431Zm126.831-7.527v70.202h-28.23V71.839h27.002v20.374h1.392c2.782-6.71 7.2-12.028 13.255-15.956 6.056-3.927 13.584-5.89 22.503-5.89 8.264 0 15.465 1.8 21.684 5.318 6.137 3.518 10.964 8.673 14.319 15.382 3.437 6.71 5.074 14.81 4.992 24.383v76.175h-28.23v-71.92c0-8.019-2.046-14.237-6.219-18.819-4.173-4.5-9.819-6.791-17.102-6.791-4.91 0-9.328 1.063-13.174 3.272-3.846 2.128-6.792 5.237-9.001 9.328-2.046 4.009-3.191 8.918-3.191 14.728ZM589.233 239c-10.147 0-18.82-1.391-26.103-4.091-7.282-2.7-13.092-6.382-17.511-10.964-4.418-4.582-7.528-9.655-9.164-15.219l25.448-6.136c1.145 2.372 2.782 4.663 4.991 6.954 2.209 2.291 5.155 4.255 8.837 5.81 3.683 1.554 8.428 2.291 14.074 2.291 8.019 0 14.647-1.964 19.884-5.81 5.237-3.845 7.856-10.227 7.856-19.064v-22.665h-1.391c-1.473 2.946-3.601 5.892-6.383 9.001-2.782 3.109-6.464 5.645-10.965 7.691-4.582 2.046-10.228 3.109-17.101 3.109-9.165 0-17.511-2.209-25.039-6.545-7.446-4.337-13.42-10.883-17.757-19.474-4.418-8.673-6.628-19.473-6.628-32.565 0-13.091 2.21-24.301 6.628-33.383 4.419-9.082 10.311-15.955 17.839-20.7 7.528-4.746 15.874-7.037 25.039-7.037 7.037 0 12.846 1.145 17.347 3.518 4.582 2.373 8.182 5.236 10.883 8.51 2.7 3.272 4.746 6.382 6.137 9.327h1.554v-19.8h27.821v121.749c0 10.228-2.454 18.737-7.364 25.447-4.91 6.709-11.538 11.7-20.048 15.055-8.509 3.355-18.165 4.991-28.884 4.991Zm.245-71.266c5.974 0 11.047-1.473 15.302-4.337 4.173-2.945 7.446-7.118 9.573-12.519 2.21-5.482 3.274-12.027 3.274-19.637 0-7.609-1.064-14.155-3.274-19.8-2.127-5.646-5.318-10.064-9.491-13.255-4.174-3.11-9.329-4.746-15.384-4.746s-11.537 1.636-15.792 4.91c-4.173 3.272-7.365 7.772-9.492 13.418-2.128 5.727-3.191 12.191-3.191 19.392 0 7.2 1.063 13.745 3.273 19.228 2.127 5.482 5.318 9.736 9.573 12.764 4.174 3.027 9.41 4.582 15.629 4.582Zm141.56-26.51V71.839h28.23v119.786h-27.412v-21.273h-1.227c-2.7 6.709-7.119 12.191-13.338 16.446-6.137 4.255-13.747 6.382-22.748 6.382-7.855 0-14.81-1.718-20.783-5.237-5.974-3.518-10.72-8.591-14.075-15.382-3.355-6.709-5.073-14.891-5.073-24.464V71.839h28.312v71.921c0 7.609 2.046 13.664 6.219 18.083 4.173 4.5 9.655 6.709 16.365 6.709 4.173 0 8.183-.982 12.111-3.028 3.927-2.045 7.118-5.072 9.655-9.082 2.537-4.091 3.764-9.164 3.764-15.218Zm65.707-109.395v159.796h-28.23V31.828h28.23Zm44.841 162.169c-7.61 0-14.402-1.391-20.457-4.091-6.055-2.7-10.883-6.791-14.32-12.109-3.518-5.319-5.237-11.946-5.237-19.801 0-6.791 1.228-12.355 3.765-16.773 2.536-4.419 5.891-7.937 10.228-10.637 4.337-2.618 9.164-4.664 14.647-6.055 5.4-1.391 11.046-2.373 16.856-3.027 7.037-.737 12.683-1.391 17.102-1.964 4.337-.573 7.528-1.555 9.574-2.782 1.963-1.309 3.027-3.273 3.027-5.973v-.491c0-5.891-1.718-10.391-5.237-13.664-3.518-3.191-8.51-4.828-15.056-4.828-6.955 0-12.356 1.473-16.447 4.5-4.009 3.028-6.71 6.546-8.183 10.719l-26.348-3.764c2.046-7.282 5.483-13.336 10.31-18.328 4.746-4.909 10.638-8.59 17.511-11.045 6.955-2.455 14.565-3.682 22.912-3.682 5.809 0 11.537.654 17.265 2.045s10.965 3.6 15.711 6.71c4.746 3.109 8.51 7.282 11.455 12.6 2.864 5.318 4.337 11.946 4.337 19.883v80.184h-27.166v-16.446h-.9c-1.719 3.355-4.092 6.464-7.201 9.328-3.109 2.864-6.955 5.237-11.619 6.955-4.828 1.718-10.229 2.536-16.529 2.536Zm7.364-20.701c5.646 0 10.556-1.145 14.729-3.354 4.173-2.291 7.364-5.237 9.655-9.001 2.292-3.763 3.355-7.854 3.355-12.273v-14.155c-.9.737-2.373 1.391-4.5 2.046-2.128.654-4.419 1.145-7.037 1.636-2.619.491-5.155.9-7.692 1.227-2.537.328-4.746.655-6.628.901-4.173.572-8.019 1.472-11.292 2.781-3.355 1.31-5.973 3.11-7.855 5.401-1.964 2.291-2.864 5.318-2.864 8.918 0 5.237 1.882 9.164 5.728 11.782 3.682 2.782 8.51 4.091 14.401 4.091Zm64.643 18.328V71.839h27.412v19.965h1.227c2.21-6.955 5.974-12.274 11.292-16.038 5.319-3.763 11.456-5.645 18.329-5.645 1.555 0 3.355.082 5.237.163 1.964.164 3.601.328 4.91.573v25.938c-1.227-.41-3.109-.819-5.646-1.146a58.814 58.814 0 0 0-7.446-.49c-5.155 0-9.738 1.145-13.829 3.354-4.091 2.209-7.282 5.236-9.655 9.164-2.373 3.927-3.519 8.427-3.519 13.5v70.448h-28.312ZM222.077 39.192l-8.019 125.923L137.387 0l84.69 39.192Zm-53.105 162.825-57.933 33.056-57.934-33.056 11.783-28.556h92.301l11.783 28.556ZM111.039 62.675l30.357 73.803H80.681l30.358-73.803ZM7.937 165.115 0 39.192 84.69 0 7.937 165.115Z"
          />
        </g>
        <defs>
          <radialGradient
            id="c"
            cx="0"
            cy="0"
            r="1"
            gradientTransform="rotate(118.122 171.182 60.81) scale(205.794)"
            gradientUnits="userSpaceOnUse"
          >
            <stop stop-color="#FF41F8" />
            <stop offset=".707" stop-color="#FF41F8" stop-opacity=".5" />
            <stop offset="1" stop-color="#FF41F8" stop-opacity="0" />
          </radialGradient>
          <linearGradient
            id="b"
            x1="0"
            x2="982"
            y1="192"
            y2="192"
            gradientUnits="userSpaceOnUse"
          >
            <stop stop-color="#F0060B" />
            <stop offset="0" stop-color="#F0070C" />
            <stop offset=".526" stop-color="#CC26D5" />
            <stop offset="1" stop-color="#7702FF" />
          </linearGradient>
          <clipPath id="a"><path fill="#fff" d="M0 0h982v239H0z" /></clipPath>
        </defs>
      </svg>
      <h1>Hello, {{ title() }}</h1>
      <p>Congratulations! Your app is running. 🎉</p>
    </div>
    <div class="divider" role="separator" aria-label="Divider"></div>
    <div class="right-side">
      <div class="pill-group">
        @for (item of [
          { title: 'Explore the Docs', link: 'https://angular.dev' },
          { title: 'Learn with Tutorials', link: 'https://angular.dev/tutorials' },
          { title: 'Prompt and best practices for AI', link: 'https://angular.dev/ai/develop-with-ai'},
          { title: 'CLI Docs', link: 'https://angular.dev/tools/cli' },
          { title: 'Angular Language Service', link: 'https://angular.dev/tools/language-service' },
          { title: 'Angular DevTools', link: 'https://angular.dev/tools/devtools' },
        ]; track item.title) {
          <a
            class="pill"
            [href]="item.link"
            target="_blank"
            rel="noopener"
          >
            <span>{{ item.title }}</span>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              height="14"
              viewBox="0 -960 960 960"
              width="14"
              fill="currentColor"
            >
              <path
                d="M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h280v80H200v560h560v-280h80v280q0 33-23.5 56.5T760-120H200Zm188-212-56-56 372-372H560v-80h280v280h-80v-144L388-332Z"
              />
            </svg>
          </a>
        }
      </div>
      <div class="social-links">
        <a
          href="https://github.com/angular/angular"
          aria-label="Github"
          target="_blank"
          rel="noopener"
        >
          <svg
            width="25"
            height="24"
            viewBox="0 0 25 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            alt="Github"
          >
            <path
              d="M12.3047 0C5.50634 0 0 5.50942 0 12.3047C0 17.7423 3.52529 22.3535 8.41332 23.9787C9.02856 24.0946 9.25414 23.7142 9.25414 23.3871C9.25414 23.0949 9.24389 22.3207 9.23876 21.2953C5.81601 22.0377 5.09414 19.6444 5.09414 19.6444C4.53427 18.2243 3.72524 17.8449 3.72524 17.8449C2.61064 17.082 3.81137 17.0973 3.81137 17.0973C5.04697 17.1835 5.69604 18.3647 5.69604 18.3647C6.79321 20.2463 8.57636 19.7029 9.27978 19.3881C9.39052 18.5924 9.70736 18.0499 10.0591 17.7423C7.32641 17.4347 4.45429 16.3765 4.45429 11.6618C4.45429 10.3185 4.9311 9.22133 5.72065 8.36C5.58222 8.04931 5.16694 6.79833 5.82831 5.10337C5.82831 5.10337 6.85883 4.77319 9.2121 6.36459C10.1965 6.09082 11.2424 5.95546 12.2883 5.94931C13.3342 5.95546 14.3801 6.09082 15.3644 6.36459C17.7023 4.77319 18.7328 5.10337 18.7328 5.10337C19.3942 6.79833 18.9789 8.04931 18.8559 8.36C19.6403 9.22133 20.1171 10.3185 20.1171 11.6618C20.1171 16.3888 17.2409 17.4296 14.5031 17.7321C14.9338 18.1012 15.3337 18.8559 15.3337 20.0084C15.3337 21.6552 15.3183 22.978 15.3183 23.3779C15.3183 23.7009 15.5336 24.0854 16.1642 23.9623C21.0871 22.3484 24.6094 17.7341 24.6094 12.3047C24.6094 5.50942 19.0999 0 12.3047 0Z"
            />
          </svg>
        </a>
        <a
          href="https://twitter.com/angular"
          aria-label="Twitter"
          target="_blank"
          rel="noopener"
        >
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            alt="Twitter"
          >
            <path
              d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"
            />
          </svg>
        </a>
        <a
          href="https://www.youtube.com/channel/UCbn1OgGei-DV7aSRo_HaAiw"
          aria-label="Youtube"
          target="_blank"
          rel="noopener"
        >
          <svg
            width="29"
            height="20"
            viewBox="0 0 29 20"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            alt="Youtube"
          >
            <path
              fill-rule="evenodd"
              clip-rule="evenodd"
              d="M27.4896 1.52422C27.9301 1.96749 28.2463 2.51866 28.4068 3.12258C29.0004 5.35161 29.0004 10 29.0004 10C29.0004 10 29.0004 14.6484 28.4068 16.8774C28.2463 17.4813 27.9301 18.0325 27.4896 18.4758C27.0492 18.9191 26.5 19.2389 25.8972 19.4032C23.6778 20 14.8068 20 14.8068 20C14.8068 20 5.93586 20 3.71651 19.4032C3.11363 19.2389 2.56449 18.9191 2.12405 18.4758C1.68361 18.0325 1.36732 17.4813 1.20683 16.8774C0.613281 14.6484 0.613281 10 0.613281 10C0.613281 10 0.613281 5.35161 1.20683 3.12258C1.36732 2.51866 1.68361 1.96749 2.12405 1.52422C2.56449 1.08095 3.11363 0.76113 3.71651 0.596774C5.93586 0 14.8068 0 14.8068 0C14.8068 0 23.6778 0 25.8972 0.596774C26.5 0.76113 27.0492 1.08095 27.4896 1.52422ZM19.3229 10L11.9036 5.77905V14.221L19.3229 10Z"
            />
          </svg>
        </a>
      </div>
    </div>
  </div>
</main>

<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- * * * * * * * * * * * The content above * * * * * * * * * * * * -->
<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * * -->
<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * * -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- * * * * * * * * * * End of Placeholder  * * * * * * * * * * * * -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->


<router-outlet />

================================================================================
ARCHIVO: src/app/app.routes.ts
UBICACIÓN EN ÁRBOL: src/app/
================================================================================
import { Routes } from '@angular/router';

export const routes: Routes = [];

================================================================================
ARCHIVO: src/app/app.scss
UBICACIÓN EN ÁRBOL: src/app/
================================================================================
[ARCHIVO VACÍO]

================================================================================
ARCHIVO: src/app/app.ts
UBICACIÓN EN ÁRBOL: src/app/
================================================================================
import { Component, signal } from '@angular/core';
import { RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-root',
  imports: [RouterOutlet],
  templateUrl: './app.html',
  styleUrl: './app.scss'
})
export class App {
  protected readonly title = signal('admin-residences');
}

================================================================================
ARCHIVO: src/app/dashboard/dashboard.html
UBICACIÓN EN ÁRBOL: src/app/dashboard/
================================================================================
<div class="dashboard-container">
  <!-- Header con información del usuario y residencia -->
  <div class="dashboard-header">
    <mat-card>
      <mat-card-content>
        <div class="user-info">
          <h2>Bienvenido, {{ authService.user()?.role | titlecase }}</h2>

          @if (residenceService.hasMultipleResidences()) {
          <mat-form-field>
            <mat-label>Seleccionar Residencia</mat-label>
            <mat-select
              [value]="residenceService.selectedResidenceId()"
              (selectionChange)="onResidenceChange($event.value)"
            >
              @for (residence of residenceService.residences(); track residence.id) {
              <mat-option [value]="residence.id">
                {{ residence.name }}
              </mat-option>
              }
            </mat-select>
          </mat-form-field>
          } @if (residenceService.selectedResidence()) {
          <div class="selected-residence">
            <h3>{{ residenceService.selectedResidence()?.name }}</h3>
          </div>
          }
        </div>
      </mat-card-content>
    </mat-card>
  </div>

  <!-- Estadísticas del dashboard -->
  <div class="dashboard-stats">
    @if (dashboardLoading()) {
    <mat-spinner></mat-spinner>
    } @else {
    <div class="stats-grid">
      <mat-card class="stat-card">
        <mat-card-content>
          <h3>Residentes Activos</h3>
          <div class="stat-number">{{ dashboardStats().activeResidents }}</div>
        </mat-card-content>
      </mat-card>

      <mat-card class="stat-card">
        <mat-card-content>
          <h3>Mediciones Hoy</h3>
          <div class="stat-number">{{ dashboardStats().todayMeasurements }}</div>
        </mat-card-content>
      </mat-card>

      <mat-card class="stat-card">
        <mat-card-content>
          <h3>Tareas Pendientes</h3>
          <div class="stat-number">{{ dashboardStats().pendingTasks }}</div>
        </mat-card-content>
      </mat-card>

      @if (authService.isSuperAdmin() || authService.isManager()) {
      <mat-card class="stat-card">
        <mat-card-content>
          <h3>Dispositivos Activos</h3>
          <div class="stat-number">{{ dashboardStats().activeDevices }}</div>
        </mat-card-content>
      </mat-card>
      }
    </div>
    }
  </div>

  <!-- Acciones rápidas -->
  <div class="quick-actions">
    <mat-card>
      <mat-card-header>
        <mat-card-title>Acciones Rápidas</mat-card-title>
      </mat-card-header>
      <mat-card-content>
        <div class="actions-grid">
          <button mat-raised-button color="primary" (click)="navigateToResidents()">
            Ver Residentes
          </button>

          @if (authService.isProfessional()) {
          <button mat-raised-button color="accent" (click)="navigateToMeasurements()">
            Nueva Medición
          </button>
          } @if (authService.isManager() || authService.isSuperAdmin()) {
          <button mat-raised-button (click)="navigateToDevices()">Gestionar Dispositivos</button>
          } @if (authService.isSuperAdmin()) {
          <button mat-raised-button (click)="navigateToUsers()">Gestionar Usuarios</button>
          }
        </div>
      </mat-card-content>
    </mat-card>
  </div>
</div>

================================================================================
ARCHIVO: src/app/dashboard/dashboard.scss
UBICACIÓN EN ÁRBOL: src/app/dashboard/
================================================================================
.dashboard-container {
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
}

.dashboard-header {
  margin-bottom: 20px;
}

.user-info {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 16px;
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 16px;
  margin-bottom: 20px;
}

.stat-card {
  text-align: center;
}

.stat-number {
  font-size: 2rem;
  font-weight: bold;
  color: #1976d2;
}

.actions-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 16px;
}

@media (max-width: 768px) {
  .user-info {
    flex-direction: column;
    align-items: flex-start;
  }

  .stats-grid {
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  }
}

================================================================================
ARCHIVO: src/app/dashboard/dashboard.ts
UBICACIÓN EN ÁRBOL: src/app/dashboard/
================================================================================
import { CommonModule } from '@angular/common';
import { Component, inject } from '@angular/core';
import { MatButtonModule } from '@angular/material/button';
import { MatCardModule } from '@angular/material/card';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatSelectModule } from '@angular/material/select';
import { ResidenceService, AuthService } from '@core';

@Component({
  selector: 'app-dashboard',
  imports: [
    CommonModule,
    MatCardModule,
    MatButtonModule,
    MatSelectModule,
    MatProgressSpinnerModule,
  ],
  templateUrl: './dashboard.html',
  styleUrl: './dashboard.scss',
})
export class Dashboard {
  readonly authService = inject(AuthService);
  readonly residenceService = inject(ResidenceService);
  private readonly residentsService = inject(ResidentsService);
  private readonly measurementsService = inject(MeasurementsService);

  // State signals
  private readonly _dashboardStats = signal({
    activeResidents: 0,
    todayMeasurements: 0,
    pendingTasks: 0,
    activeDevices: 0,
  });

  private readonly _dashboardLoading = signal(false);

  // Computed signals
  readonly dashboardStats = this._dashboardStats.asReadonly();
  readonly dashboardLoading = this._dashboardLoading.asReadonly();

  // Effect para recargar stats cuando cambie la residencia
  private readonly reloadStatsEffect = effect(() => {
    const residenceId = this.residenceService.selectedResidenceId();
    if (residenceId) {
      this.loadDashboardStats();
    }
  });

  ngOnInit() {
    // Cargar stats iniciales si ya hay residencia seleccionada
    if (this.residenceService.selectedResidenceId()) {
      this.loadDashboardStats();
    }
  }

  onResidenceChange(residenceId: string): void {
    this.residenceService.selectResidence(residenceId);
  }

  private loadDashboardStats(): void {
    this._dashboardLoading.set(true);

    // Cargar residentes activos
    this.residentsService.listResidents().subscribe({
      next: (residents) => {
        const activeCount = residents.filter((r) => r.status === 'active').length;
        this._dashboardStats.update((stats) => ({
          ...stats,
          activeResidents: activeCount,
        }));
      },
      error: (error) => console.error('Error loading residents:', error),
    });

    // Cargar mediciones del día
    const today = new Date().toISOString().split('T')[0];
    this.measurementsService
      .listMeasurements({
        since: `${today}T00:00:00Z`,
        until: `${today}T23:59:59Z`,
      })
      .subscribe({
        next: (measurements) => {
          this._dashboardStats.update((stats) => ({
            ...stats,
            todayMeasurements: measurements.length,
          }));
        },
        error: (error) => console.error('Error loading measurements:', error),
        complete: () => this._dashboardLoading.set(false),
      });
  }

  navigateToResidents(): void {
    // Implementar navegación con Router
    // this.router.navigate(['/residents']);
  }

  navigateToMeasurements(): void {
    // this.router.navigate(['/measurements/new']);
  }

  navigateToDevices(): void {
    // this.router.navigate(['/devices']);
  }

  navigateToUsers(): void {
    // this.router.navigate(['/users']);
  }
}

================================================================================
ARCHIVO: src/environments/environment.development.ts
UBICACIÓN EN ÁRBOL: src/environments/
================================================================================
export const environment = {
  production: false,
  apiUrl: 'http://127.0.0.1:8000',
};

================================================================================
ARCHIVO: src/environments/environment.ts
UBICACIÓN EN ÁRBOL: src/environments/
================================================================================
export const environment = {
  production: true,
  apiUrl: 'https://your-production-api.com',
};

================================================================================
ARCHIVO: src/index.html
UBICACIÓN EN ÁRBOL: src/
================================================================================
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>AdminResidences</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
<body>
  <app-root></app-root>
</body>
</html>

================================================================================
ARCHIVO: src/main.ts
UBICACIÓN EN ÁRBOL: src/
================================================================================
import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { App } from './app/app';

bootstrapApplication(App, appConfig)
  .catch((err) => console.error(err));

================================================================================
ARCHIVO: src/openapi/api-config.provider.ts
UBICACIÓN EN ÁRBOL: src/openapi/
================================================================================
// src/app/core/api/api-config.provider.ts
import { Provider } from '@angular/core';

import { environment } from '../environments/environment';

export function provideApiConfiguration(): Provider {
  return {
    provide: Configuration,
    useFactory: () => {
      return new Configuration({
        basePath: environment.apiUrl,
      });
    },
  };
}

================================================================================
ARCHIVO: src/openapi/generated/api-configuration.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { Injectable } from '@angular/core';

/**
 * Global configuration
 */
@Injectable({
  providedIn: 'root',
})
export class ApiConfiguration {
  rootUrl: string = '';
}

/**
 * Parameters for `.forRoot()`
 */
export interface ApiConfigurationParams {
  rootUrl?: string;
}

================================================================================
ARCHIVO: src/openapi/generated/base-service.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ApiConfiguration } from './api-configuration';

/**
 * Base class for services
 */
@Injectable()
export class BaseService {
  constructor(
    protected config: ApiConfiguration,
    protected http: HttpClient
  ) {
  }

  private _rootUrl?: string;

  /**
   * Returns the root url for all operations in this service. If not set directly in this
   * service, will fallback to `ApiConfiguration.rootUrl`.
   */
  get rootUrl(): string {
    return this._rootUrl || this.config.rootUrl;
  }

  /**
   * Sets the root URL for API operations in this service.
   */
  set rootUrl(rootUrl: string) {
    this._rootUrl = rootUrl;
  }
}

================================================================================
ARCHIVO: src/openapi/generated/fn/auth/login-auth-login-post.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/auth/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { LoginRequest } from '../../models/login-request';
import { TokenResponse } from '../../models/token-response';

export interface LoginAuthLoginPost$Params {
      body: LoginRequest
}

export function loginAuthLoginPost(http: HttpClient, rootUrl: string, params: LoginAuthLoginPost$Params, context?: HttpContext): Observable<StrictHttpResponse<TokenResponse>> {
  const rb = new RequestBuilder(rootUrl, loginAuthLoginPost.PATH, 'post');
  if (params) {
    rb.body(params.body, 'application/json');
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<TokenResponse>;
    })
  );
}

loginAuthLoginPost.PATH = '/auth/login';

================================================================================
ARCHIVO: src/openapi/generated/fn/devices/create-device-devices-post.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/devices/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { DeviceCreate } from '../../models/device-create';
import { DeviceOut } from '../../models/device-out';

export interface CreateDeviceDevicesPost$Params {
      body: DeviceCreate
}

export function createDeviceDevicesPost(http: HttpClient, rootUrl: string, params: CreateDeviceDevicesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<DeviceOut>> {
  const rb = new RequestBuilder(rootUrl, createDeviceDevicesPost.PATH, 'post');
  if (params) {
    rb.body(params.body, 'application/json');
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<DeviceOut>;
    })
  );
}

createDeviceDevicesPost.PATH = '/devices';

================================================================================
ARCHIVO: src/openapi/generated/fn/devices/list-devices-devices-get.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/devices/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { DeviceOut } from '../../models/device-out';

export interface ListDevicesDevicesGet$Params {
}

export function listDevicesDevicesGet(http: HttpClient, rootUrl: string, params?: ListDevicesDevicesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DeviceOut>>> {
  const rb = new RequestBuilder(rootUrl, listDevicesDevicesGet.PATH, 'get');
  if (params) {
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<Array<DeviceOut>>;
    })
  );
}

listDevicesDevicesGet.PATH = '/devices';

================================================================================
ARCHIVO: src/openapi/generated/fn/measurements/create-measurement-measurements-post.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/measurements/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { MeasurementCreate } from '../../models/measurement-create';
import { MeasurementOut } from '../../models/measurement-out';

export interface CreateMeasurementMeasurementsPost$Params {
  'X-Residence-Id'?: (string | null);
      body: MeasurementCreate
}

export function createMeasurementMeasurementsPost(http: HttpClient, rootUrl: string, params: CreateMeasurementMeasurementsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<MeasurementOut>> {
  const rb = new RequestBuilder(rootUrl, createMeasurementMeasurementsPost.PATH, 'post');
  if (params) {
    rb.header('X-Residence-Id', params['X-Residence-Id'], {});
    rb.body(params.body, 'application/json');
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<MeasurementOut>;
    })
  );
}

createMeasurementMeasurementsPost.PATH = '/measurements';

================================================================================
ARCHIVO: src/openapi/generated/fn/measurements/delete-measurement-measurements-measurement-id-delete.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/measurements/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';


export interface DeleteMeasurementMeasurementsMeasurementIdDelete$Params {
  measurement_id: string;
  'X-Residence-Id'?: (string | null);
}

export function deleteMeasurementMeasurementsMeasurementIdDelete(http: HttpClient, rootUrl: string, params: DeleteMeasurementMeasurementsMeasurementIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
  const rb = new RequestBuilder(rootUrl, deleteMeasurementMeasurementsMeasurementIdDelete.PATH, 'delete');
  if (params) {
    rb.path('measurement_id', params.measurement_id, {});
    rb.header('X-Residence-Id', params['X-Residence-Id'], {});
  }

  return http.request(
    rb.build({ responseType: 'text', accept: '*/*', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
    })
  );
}

deleteMeasurementMeasurementsMeasurementIdDelete.PATH = '/measurements/{measurement_id}';

================================================================================
ARCHIVO: src/openapi/generated/fn/measurements/get-measurement-measurements-measurement-id-get.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/measurements/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { MeasurementOut } from '../../models/measurement-out';

export interface GetMeasurementMeasurementsMeasurementIdGet$Params {
  measurement_id: string;
  'X-Residence-Id'?: (string | null);
}

export function getMeasurementMeasurementsMeasurementIdGet(http: HttpClient, rootUrl: string, params: GetMeasurementMeasurementsMeasurementIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<MeasurementOut>> {
  const rb = new RequestBuilder(rootUrl, getMeasurementMeasurementsMeasurementIdGet.PATH, 'get');
  if (params) {
    rb.path('measurement_id', params.measurement_id, {});
    rb.header('X-Residence-Id', params['X-Residence-Id'], {});
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<MeasurementOut>;
    })
  );
}

getMeasurementMeasurementsMeasurementIdGet.PATH = '/measurements/{measurement_id}';

================================================================================
ARCHIVO: src/openapi/generated/fn/measurements/list-measurements-measurements-get.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/measurements/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { MeasurementOut } from '../../models/measurement-out';

export interface ListMeasurementsMeasurementsGet$Params {
  resident_id?: (string | null);

/**
 * bp|spo2|weight|temperature
 */
  type?: (string | null);

/**
 * ISO datetime
 */
  since?: (string | null);

/**
 * ISO datetime
 */
  until?: (string | null);
  limit?: number;
  'X-Residence-Id'?: (string | null);
}

export function listMeasurementsMeasurementsGet(http: HttpClient, rootUrl: string, params?: ListMeasurementsMeasurementsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MeasurementOut>>> {
  const rb = new RequestBuilder(rootUrl, listMeasurementsMeasurementsGet.PATH, 'get');
  if (params) {
    rb.query('resident_id', params.resident_id, {});
    rb.query('type', params.type, {});
    rb.query('since', params.since, {});
    rb.query('until', params.until, {});
    rb.query('limit', params.limit, {});
    rb.header('X-Residence-Id', params['X-Residence-Id'], {});
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<Array<MeasurementOut>>;
    })
  );
}

listMeasurementsMeasurementsGet.PATH = '/measurements';

================================================================================
ARCHIVO: src/openapi/generated/fn/measurements/update-measurement-measurements-measurement-id-patch.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/measurements/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { MeasurementOut } from '../../models/measurement-out';
import { MeasurementUpdate } from '../../models/measurement-update';

export interface UpdateMeasurementMeasurementsMeasurementIdPatch$Params {
  measurement_id: string;
  'X-Residence-Id'?: (string | null);
      body: MeasurementUpdate
}

export function updateMeasurementMeasurementsMeasurementIdPatch(http: HttpClient, rootUrl: string, params: UpdateMeasurementMeasurementsMeasurementIdPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<MeasurementOut>> {
  const rb = new RequestBuilder(rootUrl, updateMeasurementMeasurementsMeasurementIdPatch.PATH, 'patch');
  if (params) {
    rb.path('measurement_id', params.measurement_id, {});
    rb.header('X-Residence-Id', params['X-Residence-Id'], {});
    rb.body(params.body, 'application/json');
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<MeasurementOut>;
    })
  );
}

updateMeasurementMeasurementsMeasurementIdPatch.PATH = '/measurements/{measurement_id}';

================================================================================
ARCHIVO: src/openapi/generated/fn/operations/me-auth-me-get.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/operations/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';


export interface MeAuthMeGet$Params {
}

export function meAuthMeGet(http: HttpClient, rootUrl: string, params?: MeAuthMeGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
  const rb = new RequestBuilder(rootUrl, meAuthMeGet.PATH, 'get');
  if (params) {
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<any>;
    })
  );
}

meAuthMeGet.PATH = '/auth/me';

================================================================================
ARCHIVO: src/openapi/generated/fn/operations/root-get.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/operations/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';


export interface RootGet$Params {
}

export function rootGet(http: HttpClient, rootUrl: string, params?: RootGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
  const rb = new RequestBuilder(rootUrl, rootGet.PATH, 'get');
  if (params) {
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<any>;
    })
  );
}

rootGet.PATH = '/';

================================================================================
ARCHIVO: src/openapi/generated/fn/residences/get-residence-residences-residence-id-get.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/residences/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';


export interface GetResidenceResidencesResidenceIdGet$Params {
  residence_id: string;
}

export function getResidenceResidencesResidenceIdGet(http: HttpClient, rootUrl: string, params: GetResidenceResidencesResidenceIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: any;
}>> {
  const rb = new RequestBuilder(rootUrl, getResidenceResidencesResidenceIdGet.PATH, 'get');
  if (params) {
    rb.path('residence_id', params.residence_id, {});
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<{
      [key: string]: any;
      }>;
    })
  );
}

getResidenceResidencesResidenceIdGet.PATH = '/residences/{residence_id}';

================================================================================
ARCHIVO: src/openapi/generated/fn/residences/list-residences-residences-get.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/residences/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';


export interface ListResidencesResidencesGet$Params {
}

export function listResidencesResidencesGet(http: HttpClient, rootUrl: string, params?: ListResidencesResidencesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<{
[key: string]: any;
}>>> {
  const rb = new RequestBuilder(rootUrl, listResidencesResidencesGet.PATH, 'get');
  if (params) {
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<Array<{
      [key: string]: any;
      }>>;
    })
  );
}

listResidencesResidencesGet.PATH = '/residences';

================================================================================
ARCHIVO: src/openapi/generated/fn/residences/my-residences-residences-mine-get.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/residences/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';


export interface MyResidencesResidencesMineGet$Params {
}

export function myResidencesResidencesMineGet(http: HttpClient, rootUrl: string, params?: MyResidencesResidencesMineGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<{
[key: string]: any;
}>>> {
  const rb = new RequestBuilder(rootUrl, myResidencesResidencesMineGet.PATH, 'get');
  if (params) {
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<Array<{
      [key: string]: any;
      }>>;
    })
  );
}

myResidencesResidencesMineGet.PATH = '/residences/mine';

================================================================================
ARCHIVO: src/openapi/generated/fn/residents/change-bed-residents-resident-id-bed-patch.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/residents/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { ResidentChangeBed } from '../../models/resident-change-bed';
import { ResidentOut } from '../../models/resident-out';

export interface ChangeBedResidentsResidentIdBedPatch$Params {
  resident_id: string;
      body: ResidentChangeBed
}

export function changeBedResidentsResidentIdBedPatch(http: HttpClient, rootUrl: string, params: ChangeBedResidentsResidentIdBedPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<ResidentOut>> {
  const rb = new RequestBuilder(rootUrl, changeBedResidentsResidentIdBedPatch.PATH, 'patch');
  if (params) {
    rb.path('resident_id', params.resident_id, {});
    rb.body(params.body, 'application/json');
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<ResidentOut>;
    })
  );
}

changeBedResidentsResidentIdBedPatch.PATH = '/residents/{resident_id}/bed';

================================================================================
ARCHIVO: src/openapi/generated/fn/residents/create-resident-residents-post.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/residents/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { ResidentCreate } from '../../models/resident-create';
import { ResidentOut } from '../../models/resident-out';

export interface CreateResidentResidentsPost$Params {
      body: ResidentCreate
}

export function createResidentResidentsPost(http: HttpClient, rootUrl: string, params: CreateResidentResidentsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<ResidentOut>> {
  const rb = new RequestBuilder(rootUrl, createResidentResidentsPost.PATH, 'post');
  if (params) {
    rb.body(params.body, 'application/json');
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<ResidentOut>;
    })
  );
}

createResidentResidentsPost.PATH = '/residents';

================================================================================
ARCHIVO: src/openapi/generated/fn/residents/list-residents-residents-get.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/residents/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { ResidentOut } from '../../models/resident-out';

export interface ListResidentsResidentsGet$Params {
}

export function listResidentsResidentsGet(http: HttpClient, rootUrl: string, params?: ListResidentsResidentsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ResidentOut>>> {
  const rb = new RequestBuilder(rootUrl, listResidentsResidentsGet.PATH, 'get');
  if (params) {
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<Array<ResidentOut>>;
    })
  );
}

listResidentsResidentsGet.PATH = '/residents';

================================================================================
ARCHIVO: src/openapi/generated/fn/structure/beds-structure-beds-room-id-get.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/structure/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';


export interface BedsStructureBedsRoomIdGet$Params {
  room_id: string;
}

export function bedsStructureBedsRoomIdGet(http: HttpClient, rootUrl: string, params: BedsStructureBedsRoomIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
  const rb = new RequestBuilder(rootUrl, bedsStructureBedsRoomIdGet.PATH, 'get');
  if (params) {
    rb.path('room_id', params.room_id, {});
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<any>;
    })
  );
}

bedsStructureBedsRoomIdGet.PATH = '/structure/beds/{room_id}';

================================================================================
ARCHIVO: src/openapi/generated/fn/structure/floors-structure-floors-residence-id-get.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/structure/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';


export interface FloorsStructureFloorsResidenceIdGet$Params {
  residence_id: string;
}

export function floorsStructureFloorsResidenceIdGet(http: HttpClient, rootUrl: string, params: FloorsStructureFloorsResidenceIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
  const rb = new RequestBuilder(rootUrl, floorsStructureFloorsResidenceIdGet.PATH, 'get');
  if (params) {
    rb.path('residence_id', params.residence_id, {});
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<any>;
    })
  );
}

floorsStructureFloorsResidenceIdGet.PATH = '/structure/floors/{residence_id}';

================================================================================
ARCHIVO: src/openapi/generated/fn/structure/rooms-structure-rooms-floor-id-get.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/structure/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';


export interface RoomsStructureRoomsFloorIdGet$Params {
  floor_id: string;
}

export function roomsStructureRoomsFloorIdGet(http: HttpClient, rootUrl: string, params: RoomsStructureRoomsFloorIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
  const rb = new RequestBuilder(rootUrl, roomsStructureRoomsFloorIdGet.PATH, 'get');
  if (params) {
    rb.path('floor_id', params.floor_id, {});
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<any>;
    })
  );
}

roomsStructureRoomsFloorIdGet.PATH = '/structure/rooms/{floor_id}';

================================================================================
ARCHIVO: src/openapi/generated/fn/tags/list-tags-tags-get.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/tags/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';


export interface ListTagsTagsGet$Params {
}

export function listTagsTagsGet(http: HttpClient, rootUrl: string, params?: ListTagsTagsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
  const rb = new RequestBuilder(rootUrl, listTagsTagsGet.PATH, 'get');
  if (params) {
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<any>;
    })
  );
}

listTagsTagsGet.PATH = '/tags';

================================================================================
ARCHIVO: src/openapi/generated/fn/tasks/apply-task-tasks-applications-post.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/tasks/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { TaskApplicationCreate } from '../../models/task-application-create';
import { TaskApplicationOut } from '../../models/task-application-out';

export interface ApplyTaskTasksApplicationsPost$Params {
  'X-Residence-Id'?: (string | null);
      body: TaskApplicationCreate
}

export function applyTaskTasksApplicationsPost(http: HttpClient, rootUrl: string, params: ApplyTaskTasksApplicationsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskApplicationOut>> {
  const rb = new RequestBuilder(rootUrl, applyTaskTasksApplicationsPost.PATH, 'post');
  if (params) {
    rb.header('X-Residence-Id', params['X-Residence-Id'], {});
    rb.body(params.body, 'application/json');
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<TaskApplicationOut>;
    })
  );
}

applyTaskTasksApplicationsPost.PATH = '/tasks/applications';

================================================================================
ARCHIVO: src/openapi/generated/fn/tasks/create-category-tasks-categories-post.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/tasks/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { TaskCategoryCreate } from '../../models/task-category-create';
import { TaskCategoryOut } from '../../models/task-category-out';

export interface CreateCategoryTasksCategoriesPost$Params {
  'X-Residence-Id'?: (string | null);
      body: TaskCategoryCreate
}

export function createCategoryTasksCategoriesPost(http: HttpClient, rootUrl: string, params: CreateCategoryTasksCategoriesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskCategoryOut>> {
  const rb = new RequestBuilder(rootUrl, createCategoryTasksCategoriesPost.PATH, 'post');
  if (params) {
    rb.header('X-Residence-Id', params['X-Residence-Id'], {});
    rb.body(params.body, 'application/json');
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<TaskCategoryOut>;
    })
  );
}

createCategoryTasksCategoriesPost.PATH = '/tasks/categories';

================================================================================
ARCHIVO: src/openapi/generated/fn/tasks/create-template-tasks-templates-post.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/tasks/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { TaskTemplateCreate } from '../../models/task-template-create';
import { TaskTemplateOut } from '../../models/task-template-out';

export interface CreateTemplateTasksTemplatesPost$Params {
  'X-Residence-Id'?: (string | null);
      body: TaskTemplateCreate
}

export function createTemplateTasksTemplatesPost(http: HttpClient, rootUrl: string, params: CreateTemplateTasksTemplatesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskTemplateOut>> {
  const rb = new RequestBuilder(rootUrl, createTemplateTasksTemplatesPost.PATH, 'post');
  if (params) {
    rb.header('X-Residence-Id', params['X-Residence-Id'], {});
    rb.body(params.body, 'application/json');
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<TaskTemplateOut>;
    })
  );
}

createTemplateTasksTemplatesPost.PATH = '/tasks/templates';

================================================================================
ARCHIVO: src/openapi/generated/fn/tasks/delete-application-tasks-applications-application-id-delete.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/tasks/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';


export interface DeleteApplicationTasksApplicationsApplicationIdDelete$Params {
  application_id: string;
}

export function deleteApplicationTasksApplicationsApplicationIdDelete(http: HttpClient, rootUrl: string, params: DeleteApplicationTasksApplicationsApplicationIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
  const rb = new RequestBuilder(rootUrl, deleteApplicationTasksApplicationsApplicationIdDelete.PATH, 'delete');
  if (params) {
    rb.path('application_id', params.application_id, {});
  }

  return http.request(
    rb.build({ responseType: 'text', accept: '*/*', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
    })
  );
}

deleteApplicationTasksApplicationsApplicationIdDelete.PATH = '/tasks/applications/{application_id}';

================================================================================
ARCHIVO: src/openapi/generated/fn/tasks/delete-category-tasks-categories-category-id-delete.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/tasks/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';


export interface DeleteCategoryTasksCategoriesCategoryIdDelete$Params {
  category_id: string;
}

export function deleteCategoryTasksCategoriesCategoryIdDelete(http: HttpClient, rootUrl: string, params: DeleteCategoryTasksCategoriesCategoryIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
  const rb = new RequestBuilder(rootUrl, deleteCategoryTasksCategoriesCategoryIdDelete.PATH, 'delete');
  if (params) {
    rb.path('category_id', params.category_id, {});
  }

  return http.request(
    rb.build({ responseType: 'text', accept: '*/*', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
    })
  );
}

deleteCategoryTasksCategoriesCategoryIdDelete.PATH = '/tasks/categories/{category_id}';

================================================================================
ARCHIVO: src/openapi/generated/fn/tasks/delete-template-tasks-templates-template-id-delete.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/tasks/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';


export interface DeleteTemplateTasksTemplatesTemplateIdDelete$Params {
  template_id: string;
}

export function deleteTemplateTasksTemplatesTemplateIdDelete(http: HttpClient, rootUrl: string, params: DeleteTemplateTasksTemplatesTemplateIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
  const rb = new RequestBuilder(rootUrl, deleteTemplateTasksTemplatesTemplateIdDelete.PATH, 'delete');
  if (params) {
    rb.path('template_id', params.template_id, {});
  }

  return http.request(
    rb.build({ responseType: 'text', accept: '*/*', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;
    })
  );
}

deleteTemplateTasksTemplatesTemplateIdDelete.PATH = '/tasks/templates/{template_id}';

================================================================================
ARCHIVO: src/openapi/generated/fn/tasks/list-applications-tasks-applications-get.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/tasks/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { TaskApplicationOut } from '../../models/task-application-out';

export interface ListApplicationsTasksApplicationsGet$Params {
  resident_id?: (string | null);
  template_id?: (string | null);
  limit?: number;
  'X-Residence-Id'?: (string | null);
}

export function listApplicationsTasksApplicationsGet(http: HttpClient, rootUrl: string, params?: ListApplicationsTasksApplicationsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TaskApplicationOut>>> {
  const rb = new RequestBuilder(rootUrl, listApplicationsTasksApplicationsGet.PATH, 'get');
  if (params) {
    rb.query('resident_id', params.resident_id, {});
    rb.query('template_id', params.template_id, {});
    rb.query('limit', params.limit, {});
    rb.header('X-Residence-Id', params['X-Residence-Id'], {});
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<Array<TaskApplicationOut>>;
    })
  );
}

listApplicationsTasksApplicationsGet.PATH = '/tasks/applications';

================================================================================
ARCHIVO: src/openapi/generated/fn/tasks/list-categories-tasks-categories-get.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/tasks/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { TaskCategoryOut } from '../../models/task-category-out';

export interface ListCategoriesTasksCategoriesGet$Params {
  'X-Residence-Id'?: (string | null);
}

export function listCategoriesTasksCategoriesGet(http: HttpClient, rootUrl: string, params?: ListCategoriesTasksCategoriesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TaskCategoryOut>>> {
  const rb = new RequestBuilder(rootUrl, listCategoriesTasksCategoriesGet.PATH, 'get');
  if (params) {
    rb.header('X-Residence-Id', params['X-Residence-Id'], {});
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<Array<TaskCategoryOut>>;
    })
  );
}

listCategoriesTasksCategoriesGet.PATH = '/tasks/categories';

================================================================================
ARCHIVO: src/openapi/generated/fn/tasks/list-templates-tasks-templates-get.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/tasks/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { TaskTemplateOut } from '../../models/task-template-out';

export interface ListTemplatesTasksTemplatesGet$Params {
  category_id?: (string | null);
  'X-Residence-Id'?: (string | null);
}

export function listTemplatesTasksTemplatesGet(http: HttpClient, rootUrl: string, params?: ListTemplatesTasksTemplatesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TaskTemplateOut>>> {
  const rb = new RequestBuilder(rootUrl, listTemplatesTasksTemplatesGet.PATH, 'get');
  if (params) {
    rb.query('category_id', params.category_id, {});
    rb.header('X-Residence-Id', params['X-Residence-Id'], {});
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<Array<TaskTemplateOut>>;
    })
  );
}

listTemplatesTasksTemplatesGet.PATH = '/tasks/templates';

================================================================================
ARCHIVO: src/openapi/generated/fn/tasks/update-application-tasks-applications-application-id-patch.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/tasks/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { TaskApplicationOut } from '../../models/task-application-out';
import { TaskApplicationUpdate } from '../../models/task-application-update';

export interface UpdateApplicationTasksApplicationsApplicationIdPatch$Params {
  application_id: string;
      body: TaskApplicationUpdate
}

export function updateApplicationTasksApplicationsApplicationIdPatch(http: HttpClient, rootUrl: string, params: UpdateApplicationTasksApplicationsApplicationIdPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskApplicationOut>> {
  const rb = new RequestBuilder(rootUrl, updateApplicationTasksApplicationsApplicationIdPatch.PATH, 'patch');
  if (params) {
    rb.path('application_id', params.application_id, {});
    rb.body(params.body, 'application/json');
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<TaskApplicationOut>;
    })
  );
}

updateApplicationTasksApplicationsApplicationIdPatch.PATH = '/tasks/applications/{application_id}';

================================================================================
ARCHIVO: src/openapi/generated/fn/tasks/update-category-tasks-categories-category-id-patch.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/tasks/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { TaskCategoryOut } from '../../models/task-category-out';
import { TaskCategoryUpdate } from '../../models/task-category-update';

export interface UpdateCategoryTasksCategoriesCategoryIdPatch$Params {
  category_id: string;
      body: TaskCategoryUpdate
}

export function updateCategoryTasksCategoriesCategoryIdPatch(http: HttpClient, rootUrl: string, params: UpdateCategoryTasksCategoriesCategoryIdPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskCategoryOut>> {
  const rb = new RequestBuilder(rootUrl, updateCategoryTasksCategoriesCategoryIdPatch.PATH, 'patch');
  if (params) {
    rb.path('category_id', params.category_id, {});
    rb.body(params.body, 'application/json');
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<TaskCategoryOut>;
    })
  );
}

updateCategoryTasksCategoriesCategoryIdPatch.PATH = '/tasks/categories/{category_id}';

================================================================================
ARCHIVO: src/openapi/generated/fn/tasks/update-template-tasks-templates-template-id-patch.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/fn/tasks/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { TaskTemplateOut } from '../../models/task-template-out';
import { TaskTemplateUpdate } from '../../models/task-template-update';

export interface UpdateTemplateTasksTemplatesTemplateIdPatch$Params {
  template_id: string;
      body: TaskTemplateUpdate
}

export function updateTemplateTasksTemplatesTemplateIdPatch(http: HttpClient, rootUrl: string, params: UpdateTemplateTasksTemplatesTemplateIdPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskTemplateOut>> {
  const rb = new RequestBuilder(rootUrl, updateTemplateTasksTemplatesTemplateIdPatch.PATH, 'patch');
  if (params) {
    rb.path('template_id', params.template_id, {});
    rb.body(params.body, 'application/json');
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<TaskTemplateOut>;
    })
  );
}

updateTemplateTasksTemplatesTemplateIdPatch.PATH = '/tasks/templates/{template_id}';

================================================================================
ARCHIVO: src/openapi/generated/index.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

export { ApiConfiguration } from './api-configuration';
export { BaseService } from './base-service';
export { RequestBuilder } from './request-builder';
export type { StrictHttpResponse } from './strict-http-response';
export type { DeviceCreate } from './models/device-create';
export type { DeviceOut } from './models/device-out';
export type { HttpValidationError } from './models/http-validation-error';
export type { LoginRequest } from './models/login-request';
export type { MeasurementCreate } from './models/measurement-create';
export type { MeasurementOut } from './models/measurement-out';
export type { MeasurementUpdate } from './models/measurement-update';
export type { ResidentChangeBed } from './models/resident-change-bed';
export type { ResidentCreate } from './models/resident-create';
export type { ResidentOut } from './models/resident-out';
export type { TaskApplicationCreate } from './models/task-application-create';
export type { TaskApplicationOut } from './models/task-application-out';
export type { TaskApplicationUpdate } from './models/task-application-update';
export type { TaskCategoryCreate } from './models/task-category-create';
export type { TaskCategoryOut } from './models/task-category-out';
export type { TaskCategoryUpdate } from './models/task-category-update';
export type { TaskTemplateCreate } from './models/task-template-create';
export type { TaskTemplateOut } from './models/task-template-out';
export type { TaskTemplateUpdate } from './models/task-template-update';
export type { TokenResponse } from './models/token-response';
export type { ValidationError } from './models/validation-error';
export { AuthService } from './services/auth.service';
export { ApiService } from './services/api.service';
export { ResidencesService } from './services/residences.service';
export { StructureService } from './services/structure.service';
export { ResidentsService } from './services/residents.service';
export { TagsService } from './services/tags.service';
export { DevicesService } from './services/devices.service';
export { TasksService } from './services/tasks.service';
export { MeasurementsService } from './services/measurements.service';

================================================================================
ARCHIVO: src/openapi/generated/models.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

export type { DeviceCreate } from './models/device-create';
export type { DeviceOut } from './models/device-out';
export type { HttpValidationError } from './models/http-validation-error';
export type { LoginRequest } from './models/login-request';
export type { MeasurementCreate } from './models/measurement-create';
export type { MeasurementOut } from './models/measurement-out';
export type { MeasurementUpdate } from './models/measurement-update';
export type { ResidentChangeBed } from './models/resident-change-bed';
export type { ResidentCreate } from './models/resident-create';
export type { ResidentOut } from './models/resident-out';
export type { TaskApplicationCreate } from './models/task-application-create';
export type { TaskApplicationOut } from './models/task-application-out';
export type { TaskApplicationUpdate } from './models/task-application-update';
export type { TaskCategoryCreate } from './models/task-category-create';
export type { TaskCategoryOut } from './models/task-category-out';
export type { TaskCategoryUpdate } from './models/task-category-update';
export type { TaskTemplateCreate } from './models/task-template-create';
export type { TaskTemplateOut } from './models/task-template-out';
export type { TaskTemplateUpdate } from './models/task-template-update';
export type { TokenResponse } from './models/token-response';
export type { ValidationError } from './models/validation-error';

================================================================================
ARCHIVO: src/openapi/generated/models/device-create.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/models/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

export interface DeviceCreate {
  battery_percent?: (number | null);
  mac: string;
  name: string;
  type: 'blood_pressure' | 'pulse_oximeter' | 'scale' | 'thermometer';
}

================================================================================
ARCHIVO: src/openapi/generated/models/device-out.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/models/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

export interface DeviceOut {
  battery_percent?: (number | null);
  created_at: string;
  deleted_at?: (string | null);
  id: string;
  mac: string;
  name: string;
  residence_id: string;
  type: 'blood_pressure' | 'pulse_oximeter' | 'scale' | 'thermometer';
  updated_at: string;
}

================================================================================
ARCHIVO: src/openapi/generated/models/http-validation-error.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/models/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { ValidationError } from '../models/validation-error';
export interface HttpValidationError {
  detail?: Array<ValidationError>;
}

================================================================================
ARCHIVO: src/openapi/generated/models/login-request.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/models/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

export interface LoginRequest {
  alias: string;
  password: string;
}

================================================================================
ARCHIVO: src/openapi/generated/models/measurement-create.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/models/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */


/**
 * Crear medición. El backend valida coherencia según 'type'.
 * - bp  : requiere systolic y diastolic; pulse_bpm opcional
 * - spo2: requiere spo2; pulse_bpm opcional
 * - weight: requiere weight_kg (float, 1 decimal permitido)
 * - temperature: requiere temperature_c (int)
 */
export interface MeasurementCreate {
  device_id?: (string | null);
  diastolic?: (number | null);
  pulse_bpm?: (number | null);
  resident_id: string;
  source: 'device' | 'voice' | 'manual';
  spo2?: (number | null);
  systolic?: (number | null);
  taken_at: string;
  temperature_c?: (number | null);
  type: 'bp' | 'spo2' | 'weight' | 'temperature';
  weight_kg?: (number | null);
}

================================================================================
ARCHIVO: src/openapi/generated/models/measurement-out.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/models/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

export interface MeasurementOut {
  created_at: string;
  deleted_at?: (string | null);
  device_id?: (string | null);
  diastolic?: (number | null);
  id: string;
  pulse_bpm?: (number | null);
  recorded_by: string;
  residence_id: string;
  resident_id: string;
  source: 'device' | 'voice' | 'manual';
  spo2?: (number | null);
  systolic?: (number | null);
  taken_at: string;
  temperature_c?: (number | null);
  type: 'bp' | 'spo2' | 'weight' | 'temperature';
  updated_at: string;
  weight_kg?: (number | null);
}

================================================================================
ARCHIVO: src/openapi/generated/models/measurement-update.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/models/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */


/**
 * Actualizar medición: todos los campos opcionales.
 */
export interface MeasurementUpdate {
  device_id?: (string | null);
  diastolic?: (number | null);
  pulse_bpm?: (number | null);
  source?: ('device' | 'voice' | 'manual' | null);
  spo2?: (number | null);
  systolic?: (number | null);
  taken_at?: (string | null);
  temperature_c?: (number | null);
  type?: ('bp' | 'spo2' | 'weight' | 'temperature' | null);
  weight_kg?: (number | null);
}

================================================================================
ARCHIVO: src/openapi/generated/models/resident-change-bed.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/models/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

export interface ResidentChangeBed {
  changed_at?: (string | null);
  new_bed_id: string;
}

================================================================================
ARCHIVO: src/openapi/generated/models/resident-create.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/models/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

export interface ResidentCreate {
  bed_id?: (string | null);
  birth_date: string;
  comments?: (string | null);
  full_name: string;
  gender?: (string | null);
  sex?: (string | null);
  status?: 'active' | 'discharged' | 'deceased';
}

================================================================================
ARCHIVO: src/openapi/generated/models/resident-out.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/models/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

export interface ResidentOut {
  bed_id?: (string | null);
  birth_date: string;
  comments?: (string | null);
  created_at: string;
  deleted_at?: (string | null);
  full_name: string;
  gender?: (string | null);
  id: string;
  residence_id: string;
  sex?: (string | null);
  status: 'active' | 'discharged' | 'deceased';
  status_changed_at?: (string | null);
  updated_at: string;
}

================================================================================
ARCHIVO: src/openapi/generated/models/task-application-create.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/models/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

export interface TaskApplicationCreate {
  applied_at?: (string | null);
  resident_id: string;
  selected_status_index?: (number | null);
  selected_status_text?: (string | null);
  task_template_id: string;
}

================================================================================
ARCHIVO: src/openapi/generated/models/task-application-out.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/models/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

export interface TaskApplicationOut {
  applied_at: string;
  applied_by: string;
  created_at: string;
  deleted_at?: (string | null);
  id: string;
  residence_id: string;
  resident_id: string;
  selected_status_index?: (number | null);
  selected_status_text?: (string | null);
  task_template_id: string;
  updated_at: string;
}

================================================================================
ARCHIVO: src/openapi/generated/models/task-application-update.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/models/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

export interface TaskApplicationUpdate {
  applied_at?: (string | null);
  selected_status_index?: (number | null);
  selected_status_text?: (string | null);
}

================================================================================
ARCHIVO: src/openapi/generated/models/task-category-create.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/models/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

export interface TaskCategoryCreate {
  name: string;
}

================================================================================
ARCHIVO: src/openapi/generated/models/task-category-out.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/models/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

export interface TaskCategoryOut {
  created_at: string;
  deleted_at?: (string | null);
  id: string;
  name: string;
  residence_id: string;
  updated_at: string;
}

================================================================================
ARCHIVO: src/openapi/generated/models/task-category-update.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/models/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

export interface TaskCategoryUpdate {
  name?: (string | null);
}

================================================================================
ARCHIVO: src/openapi/generated/models/task-template-create.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/models/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

export interface TaskTemplateCreate {
  audio_phrase?: (string | null);
  is_block?: (boolean | null);
  name: string;
  status1?: (string | null);
  status2?: (string | null);
  status3?: (string | null);
  status4?: (string | null);
  status5?: (string | null);
  status6?: (string | null);
  task_category_id: string;
}

================================================================================
ARCHIVO: src/openapi/generated/models/task-template-out.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/models/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

export interface TaskTemplateOut {
  audio_phrase?: (string | null);
  created_at: string;
  deleted_at?: (string | null);
  id: string;
  is_block?: (boolean | null);
  name: string;
  residence_id: string;
  status1?: (string | null);
  status2?: (string | null);
  status3?: (string | null);
  status4?: (string | null);
  status5?: (string | null);
  status6?: (string | null);
  task_category_id: string;
  updated_at: string;
}

================================================================================
ARCHIVO: src/openapi/generated/models/task-template-update.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/models/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

export interface TaskTemplateUpdate {
  audio_phrase?: (string | null);
  is_block?: (boolean | null);
  name?: (string | null);
  status1?: (string | null);
  status2?: (string | null);
  status3?: (string | null);
  status4?: (string | null);
  status5?: (string | null);
  status6?: (string | null);
  task_category_id?: (string | null);
}

================================================================================
ARCHIVO: src/openapi/generated/models/token-response.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/models/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

export interface TokenResponse {
  access_token: string;
  token_type?: 'bearer';
}

================================================================================
ARCHIVO: src/openapi/generated/models/validation-error.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/models/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

export interface ValidationError {
  loc: Array<(string | number)>;
  msg: string;
  type: string;
}

================================================================================
ARCHIVO: src/openapi/generated/request-builder.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders, HttpContext } from '@angular/common/http';

/**
 * Custom parameter codec to correctly handle the plus sign in parameter
 * values. See https://github.com/angular/angular/issues/18261
 */
class ParameterCodec implements HttpParameterCodec {
  encodeKey(key: string): string {
    return encodeURIComponent(key);
  }

  encodeValue(value: string): string {
    return encodeURIComponent(value);
  }

  decodeKey(key: string): string {
    return decodeURIComponent(key);
  }

  decodeValue(value: string): string {
    return decodeURIComponent(value);
  }
}
const ParameterCodecInstance = new ParameterCodec();

/**
 * Defines the options for appending a parameter
 */
interface ParameterOptions {
  style?: string;
  explode?: boolean;
}

/**
 * Base class for a parameter
 */
abstract class Parameter {
  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {
    this.options = options || {};
    if (this.options.style === null || this.options.style === undefined) {
      this.options.style = defaultStyle;
    }
    if (this.options.explode === null || this.options.explode === undefined) {
      this.options.explode = defaultExplode;
    }
  }

  serializeValue(value: any, separator = ','): string {
    if (value === null || value === undefined) {
      return '';
    } else if (value instanceof Array) {
      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);
    } else if (typeof value === 'object') {
      const array: string[] = [];
      for (const key of Object.keys(value)) {
        let propVal = value[key];
        if (propVal !== null && propVal !== undefined) {
          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));
          if (this.options.explode) {
            array.push(`${key}=${propVal}`);
          } else {
            array.push(key);
            array.push(propVal);
          }
        }
      }
      return array.join(separator);
    } else {
      return String(value);
    }
  }
}

/**
 * A parameter in the operation path
 */
class PathParameter extends Parameter {
  constructor(name: string, value: any, options: ParameterOptions) {
    super(name, value, options, 'simple', false);
  }

  append(path: string): string {
    let value = this.value;
    if (value === null || value === undefined) {
      value = '';
    }
    let prefix = this.options.style === 'label' ? '.' : '';
    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';
    let alreadySerialized = false;
    if (this.options.style === 'matrix') {
      // The parameter name is just used as prefix, except in some cases...
      prefix = `;${this.name}=`;
      if (this.options.explode && typeof value === 'object') {
        prefix = ';';
        if (value instanceof Array) {
          // For arrays we have to repeat the name for each element
          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);
          value = value.join(';');
          alreadySerialized = true;
        } else {
          // For objects we have to put each the key / value pairs
          value = this.serializeValue(value, ';');
          alreadySerialized = true
        }
      }
    }
    value = prefix + (alreadySerialized ? value : this.serializeValue(value, separator));
    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account
    path = path.replace(`{${this.name}}`, value);
    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);
    return path;
  }

  // @ts-ignore
  serializeValue(value: any, separator = ','): string {
    var result = typeof value === 'string' ? encodeURIComponent(value) : super.serializeValue(value, separator);
    result = result.replace(/%3D/g, '=');
    result = result.replace(/%3B/g, ';');
    result = result.replace(/%2C/g, ',');
    return result;
  }
}

/**
 * A parameter in the query
 */
class QueryParameter extends Parameter {
  constructor(name: string, value: any, options: ParameterOptions) {
    super(name, value, options, 'form', true);
  }

  append(params: HttpParams): HttpParams {
    if (this.value instanceof Array) {
      // Array serialization
      if (this.options.explode) {
        for (const v of this.value) {
          params = params.append(this.name, this.serializeValue(v));
        }
      } else {
        const separator = this.options.style === 'spaceDelimited'
          ? ' ' : this.options.style === 'pipeDelimited'
            ? '|' : ',';
        return params.append(this.name, this.serializeValue(this.value, separator));
      }
    } else if (this.value !== null && typeof this.value === 'object') {
      // Object serialization
      if (this.options.style === 'deepObject') {
        // Append a parameter for each key, in the form `name[key]`
        for (const key of Object.keys(this.value)) {
          const propVal = this.value[key];
          if (propVal !== null && propVal !== undefined) {
            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));
          }
        }
      } else if (this.options.explode) {
        // Append a parameter for each key without using the parameter name
        for (const key of Object.keys(this.value)) {
          const propVal = this.value[key];
          if (propVal !== null && propVal !== undefined) {
            params = params.append(key, this.serializeValue(propVal));
          }
        }
      } else {
        // Append a single parameter whose values are a comma-separated list of key,value,key,value...
        const array: any[] = [];
        for (const key of Object.keys(this.value)) {
          const propVal = this.value[key];
          if (propVal !== null && propVal !== undefined) {
            array.push(key);
            array.push(propVal);
          }
        }
        params = params.append(this.name, this.serializeValue(array));
      }
    } else if (this.value !== null && this.value !== undefined) {
      // Plain value
      params = params.append(this.name, this.serializeValue(this.value));
    }
    return params;
  }
}

/**
 * A parameter in the HTTP request header
 */
class HeaderParameter extends Parameter {
  constructor(name: string, value: any, options: ParameterOptions) {
    super(name, value, options, 'simple', false);
  }

  append(headers: HttpHeaders): HttpHeaders {
    if (this.value !== null && this.value !== undefined) {
      if (this.value instanceof Array) {
        for (const v of this.value) {
          headers = headers.append(this.name, this.serializeValue(v));
        }
      } else {
        headers = headers.append(this.name, this.serializeValue(this.value));
      }
    }
    return headers;
  }
}

/**
 * Helper to build http requests from parameters
 */
export class RequestBuilder {

  private _path = new Map<string, PathParameter>();
  private _query = new Map<string, QueryParameter>();
  private _header = new Map<string, HeaderParameter>();
  _bodyContent: any | null;
  _bodyContentType?: string;

  constructor(
    public rootUrl: string,
    public operationPath: string,
    public method: string) {
  }

  /**
   * Sets a path parameter
   */
  path(name: string, value: any, options?: ParameterOptions): void {
    this._path.set(name, new PathParameter(name, value, options || {}));
  }

  /**
   * Sets a query parameter
   */
  query(name: string, value: any, options?: ParameterOptions): void {
    this._query.set(name, new QueryParameter(name, value, options || {}));
  }

  /**
   * Sets a header parameter
   */
  header(name: string, value: any, options?: ParameterOptions): void {
    this._header.set(name, new HeaderParameter(name, value, options || {}));
  }

  /**
   * Sets the body content, along with the content type
   */
  body(value: any, contentType = 'application/json'): void {
    if (value instanceof Blob) {
      this._bodyContentType = value.type;
    } else {
      this._bodyContentType = contentType;
    }
    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {
      // Handle URL-encoded data
      const pairs: Array<[string, string]> = [];
      for (const key of Object.keys(value)) {
        let val = value[key];
        if (!(val instanceof Array)) {
          val = [val];
        }
        for (const v of val) {
          const formValue = this.formDataValue(v);
          if (formValue !== null) {
            pairs.push([key, formValue]);
          }
        }
      }
      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');
    } else if (this._bodyContentType === 'multipart/form-data') {
      // Handle multipart form data
      const formData = new FormData();
      if (value !== null && value !== undefined) {
        for (const key of Object.keys(value)) {
          const val = value[key];
          if (val instanceof Array) {
            for (const v of val) {
              const toAppend = this.formDataValue(v);
              if (toAppend !== null) {
                formData.append(key, toAppend);
              }
            }
          } else {
            const toAppend = this.formDataValue(val);
            if (toAppend !== null) {
              formData.set(key, toAppend);
            }
          }
        }
      }
      this._bodyContent = formData;
    } else {
      // The body is the plain content
      this._bodyContent = value;
    }
  }

  private formDataValue(value: any): any {
    if (value === null || value === undefined) {
      return null;
    }
    if (value instanceof Blob) {
      return value;
    }
    if (typeof value === 'object') {
      return new Blob([JSON.stringify(value)], {type: 'application/json'})
    }
    return String(value);
  }

  /**
   * Builds the request with the current set parameters
   */
  build<T = any>(options?: {
    /** Which content types to accept */
    accept?: string;

    /** The expected response type */
    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';

    /** Whether to report progress on uploads / downloads */
    reportProgress?: boolean;

    /** Allow passing HttpContext for HttpClient */
    context?: HttpContext;
  }): HttpRequest<T> {

    options = options || {};

    // Path parameters
    let path = this.operationPath;
    for (const pathParam of this._path.values()) {
      path = pathParam.append(path);
    }
    const url = this.rootUrl + path;

    // Query parameters
    let httpParams = new HttpParams({
      encoder: ParameterCodecInstance
    });
    for (const queryParam of this._query.values()) {
      httpParams = queryParam.append(httpParams);
    }

    // Header parameters
    let httpHeaders = new HttpHeaders();
    if (options.accept) {
      httpHeaders = httpHeaders.append('Accept', options.accept);
    }
    for (const headerParam of this._header.values()) {
      httpHeaders = headerParam.append(httpHeaders);
    }

    // Request content headers
    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {
      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);
    }

    // Perform the request
    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {
      params: httpParams,
      headers: httpHeaders,
      responseType: options.responseType,
      reportProgress: options.reportProgress,
      context: options.context
    });
  }
}

================================================================================
ARCHIVO: src/openapi/generated/services.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

export { AuthService } from './services/auth.service';
export { ApiService } from './services/api.service';
export { ResidencesService } from './services/residences.service';
export { StructureService } from './services/structure.service';
export { ResidentsService } from './services/residents.service';
export { TagsService } from './services/tags.service';
export { DevicesService } from './services/devices.service';
export { TasksService } from './services/tasks.service';
export { MeasurementsService } from './services/measurements.service';

================================================================================
ARCHIVO: src/openapi/generated/services/api.service.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/services/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { meAuthMeGet } from '../fn/operations/me-auth-me-get';
import { MeAuthMeGet$Params } from '../fn/operations/me-auth-me-get';
import { rootGet } from '../fn/operations/root-get';
import { RootGet$Params } from '../fn/operations/root-get';

@Injectable({ providedIn: 'root' })
export class ApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `meAuthMeGet()` */
  static readonly MeAuthMeGetPath = '/auth/me';

  /**
   * Me.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `meAuthMeGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  meAuthMeGet$Response(params?: MeAuthMeGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return meAuthMeGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Me.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `meAuthMeGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  meAuthMeGet(params?: MeAuthMeGet$Params, context?: HttpContext): Observable<any> {
    return this.meAuthMeGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `rootGet()` */
  static readonly RootGetPath = '/';

  /**
   * Root.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rootGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  rootGet$Response(params?: RootGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return rootGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Root.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rootGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rootGet(params?: RootGet$Params, context?: HttpContext): Observable<any> {
    return this.rootGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

}

================================================================================
ARCHIVO: src/openapi/generated/services/auth.service.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/services/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { loginAuthLoginPost } from '../fn/auth/login-auth-login-post';
import { LoginAuthLoginPost$Params } from '../fn/auth/login-auth-login-post';
import { TokenResponse } from '../models/token-response';

@Injectable({ providedIn: 'root' })
export class AuthService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `loginAuthLoginPost()` */
  static readonly LoginAuthLoginPostPath = '/auth/login';

  /**
   * Login.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `loginAuthLoginPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  loginAuthLoginPost$Response(params: LoginAuthLoginPost$Params, context?: HttpContext): Observable<StrictHttpResponse<TokenResponse>> {
    return loginAuthLoginPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Login.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `loginAuthLoginPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  loginAuthLoginPost(params: LoginAuthLoginPost$Params, context?: HttpContext): Observable<TokenResponse> {
    return this.loginAuthLoginPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<TokenResponse>): TokenResponse => r.body)
    );
  }

}

================================================================================
ARCHIVO: src/openapi/generated/services/devices.service.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/services/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createDeviceDevicesPost } from '../fn/devices/create-device-devices-post';
import { CreateDeviceDevicesPost$Params } from '../fn/devices/create-device-devices-post';
import { DeviceOut } from '../models/device-out';
import { listDevicesDevicesGet } from '../fn/devices/list-devices-devices-get';
import { ListDevicesDevicesGet$Params } from '../fn/devices/list-devices-devices-get';

@Injectable({ providedIn: 'root' })
export class DevicesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `listDevicesDevicesGet()` */
  static readonly ListDevicesDevicesGetPath = '/devices';

  /**
   * List Devices.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listDevicesDevicesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  listDevicesDevicesGet$Response(params?: ListDevicesDevicesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DeviceOut>>> {
    return listDevicesDevicesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List Devices.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listDevicesDevicesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listDevicesDevicesGet(params?: ListDevicesDevicesGet$Params, context?: HttpContext): Observable<Array<DeviceOut>> {
    return this.listDevicesDevicesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<DeviceOut>>): Array<DeviceOut> => r.body)
    );
  }

  /** Path part for operation `createDeviceDevicesPost()` */
  static readonly CreateDeviceDevicesPostPath = '/devices';

  /**
   * Create Device.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createDeviceDevicesPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createDeviceDevicesPost$Response(params: CreateDeviceDevicesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<DeviceOut>> {
    return createDeviceDevicesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Device.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createDeviceDevicesPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createDeviceDevicesPost(params: CreateDeviceDevicesPost$Params, context?: HttpContext): Observable<DeviceOut> {
    return this.createDeviceDevicesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<DeviceOut>): DeviceOut => r.body)
    );
  }

}

================================================================================
ARCHIVO: src/openapi/generated/services/measurements.service.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/services/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createMeasurementMeasurementsPost } from '../fn/measurements/create-measurement-measurements-post';
import { CreateMeasurementMeasurementsPost$Params } from '../fn/measurements/create-measurement-measurements-post';
import { deleteMeasurementMeasurementsMeasurementIdDelete } from '../fn/measurements/delete-measurement-measurements-measurement-id-delete';
import { DeleteMeasurementMeasurementsMeasurementIdDelete$Params } from '../fn/measurements/delete-measurement-measurements-measurement-id-delete';
import { getMeasurementMeasurementsMeasurementIdGet } from '../fn/measurements/get-measurement-measurements-measurement-id-get';
import { GetMeasurementMeasurementsMeasurementIdGet$Params } from '../fn/measurements/get-measurement-measurements-measurement-id-get';
import { listMeasurementsMeasurementsGet } from '../fn/measurements/list-measurements-measurements-get';
import { ListMeasurementsMeasurementsGet$Params } from '../fn/measurements/list-measurements-measurements-get';
import { MeasurementOut } from '../models/measurement-out';
import { updateMeasurementMeasurementsMeasurementIdPatch } from '../fn/measurements/update-measurement-measurements-measurement-id-patch';
import { UpdateMeasurementMeasurementsMeasurementIdPatch$Params } from '../fn/measurements/update-measurement-measurements-measurement-id-patch';

@Injectable({ providedIn: 'root' })
export class MeasurementsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `listMeasurementsMeasurementsGet()` */
  static readonly ListMeasurementsMeasurementsGetPath = '/measurements';

  /**
   * List Measurements.
   *
   * Lista mediciones en la residencia del contexto (o inferida por resident_id / device_id).
   * Filtros opcionales: resident_id, type, rango de fechas.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listMeasurementsMeasurementsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  listMeasurementsMeasurementsGet$Response(params?: ListMeasurementsMeasurementsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MeasurementOut>>> {
    return listMeasurementsMeasurementsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List Measurements.
   *
   * Lista mediciones en la residencia del contexto (o inferida por resident_id / device_id).
   * Filtros opcionales: resident_id, type, rango de fechas.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listMeasurementsMeasurementsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listMeasurementsMeasurementsGet(params?: ListMeasurementsMeasurementsGet$Params, context?: HttpContext): Observable<Array<MeasurementOut>> {
    return this.listMeasurementsMeasurementsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MeasurementOut>>): Array<MeasurementOut> => r.body)
    );
  }

  /** Path part for operation `createMeasurementMeasurementsPost()` */
  static readonly CreateMeasurementMeasurementsPostPath = '/measurements';

  /**
   * Create Measurement.
   *
   * Crea una medición. Si el header X-Residence-Id no llega, se intenta inferir
   * a partir de resident_id o device_id. Valida pertenencia y coherencia de datos.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createMeasurementMeasurementsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMeasurementMeasurementsPost$Response(params: CreateMeasurementMeasurementsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<MeasurementOut>> {
    return createMeasurementMeasurementsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Measurement.
   *
   * Crea una medición. Si el header X-Residence-Id no llega, se intenta inferir
   * a partir de resident_id o device_id. Valida pertenencia y coherencia de datos.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createMeasurementMeasurementsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMeasurementMeasurementsPost(params: CreateMeasurementMeasurementsPost$Params, context?: HttpContext): Observable<MeasurementOut> {
    return this.createMeasurementMeasurementsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<MeasurementOut>): MeasurementOut => r.body)
    );
  }

  /** Path part for operation `getMeasurementMeasurementsMeasurementIdGet()` */
  static readonly GetMeasurementMeasurementsMeasurementIdGetPath = '/measurements/{measurement_id}';

  /**
   * Get Measurement.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMeasurementMeasurementsMeasurementIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMeasurementMeasurementsMeasurementIdGet$Response(params: GetMeasurementMeasurementsMeasurementIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<MeasurementOut>> {
    return getMeasurementMeasurementsMeasurementIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Measurement.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMeasurementMeasurementsMeasurementIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMeasurementMeasurementsMeasurementIdGet(params: GetMeasurementMeasurementsMeasurementIdGet$Params, context?: HttpContext): Observable<MeasurementOut> {
    return this.getMeasurementMeasurementsMeasurementIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<MeasurementOut>): MeasurementOut => r.body)
    );
  }

  /** Path part for operation `deleteMeasurementMeasurementsMeasurementIdDelete()` */
  static readonly DeleteMeasurementMeasurementsMeasurementIdDeletePath = '/measurements/{measurement_id}';

  /**
   * Delete Measurement.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMeasurementMeasurementsMeasurementIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMeasurementMeasurementsMeasurementIdDelete$Response(params: DeleteMeasurementMeasurementsMeasurementIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteMeasurementMeasurementsMeasurementIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete Measurement.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMeasurementMeasurementsMeasurementIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMeasurementMeasurementsMeasurementIdDelete(params: DeleteMeasurementMeasurementsMeasurementIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.deleteMeasurementMeasurementsMeasurementIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `updateMeasurementMeasurementsMeasurementIdPatch()` */
  static readonly UpdateMeasurementMeasurementsMeasurementIdPatchPath = '/measurements/{measurement_id}';

  /**
   * Update Measurement.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateMeasurementMeasurementsMeasurementIdPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMeasurementMeasurementsMeasurementIdPatch$Response(params: UpdateMeasurementMeasurementsMeasurementIdPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<MeasurementOut>> {
    return updateMeasurementMeasurementsMeasurementIdPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Measurement.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateMeasurementMeasurementsMeasurementIdPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMeasurementMeasurementsMeasurementIdPatch(params: UpdateMeasurementMeasurementsMeasurementIdPatch$Params, context?: HttpContext): Observable<MeasurementOut> {
    return this.updateMeasurementMeasurementsMeasurementIdPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<MeasurementOut>): MeasurementOut => r.body)
    );
  }

}

================================================================================
ARCHIVO: src/openapi/generated/services/residences.service.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/services/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getResidenceResidencesResidenceIdGet } from '../fn/residences/get-residence-residences-residence-id-get';
import { GetResidenceResidencesResidenceIdGet$Params } from '../fn/residences/get-residence-residences-residence-id-get';
import { listResidencesResidencesGet } from '../fn/residences/list-residences-residences-get';
import { ListResidencesResidencesGet$Params } from '../fn/residences/list-residences-residences-get';
import { myResidencesResidencesMineGet } from '../fn/residences/my-residences-residences-mine-get';
import { MyResidencesResidencesMineGet$Params } from '../fn/residences/my-residences-residences-mine-get';

@Injectable({ providedIn: 'root' })
export class ResidencesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `myResidencesResidencesMineGet()` */
  static readonly MyResidencesResidencesMineGetPath = '/residences/mine';

  /**
   * My Residences.
   *
   * Residencias asignadas al usuario (manager / professional).
   * Superadmin: devuelve todas.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `myResidencesResidencesMineGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  myResidencesResidencesMineGet$Response(params?: MyResidencesResidencesMineGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<{
[key: string]: any;
}>>> {
    return myResidencesResidencesMineGet(this.http, this.rootUrl, params, context);
  }

  /**
   * My Residences.
   *
   * Residencias asignadas al usuario (manager / professional).
   * Superadmin: devuelve todas.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `myResidencesResidencesMineGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  myResidencesResidencesMineGet(params?: MyResidencesResidencesMineGet$Params, context?: HttpContext): Observable<Array<{
[key: string]: any;
}>> {
    return this.myResidencesResidencesMineGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<{
[key: string]: any;
}>>): Array<{
[key: string]: any;
}> => r.body)
    );
  }

  /** Path part for operation `listResidencesResidencesGet()` */
  static readonly ListResidencesResidencesGetPath = '/residences';

  /**
   * List Residences.
   *
   * Listado: superadmin ve todas; otros, solo las propias (igual que /mine).
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listResidencesResidencesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  listResidencesResidencesGet$Response(params?: ListResidencesResidencesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<{
[key: string]: any;
}>>> {
    return listResidencesResidencesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List Residences.
   *
   * Listado: superadmin ve todas; otros, solo las propias (igual que /mine).
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listResidencesResidencesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listResidencesResidencesGet(params?: ListResidencesResidencesGet$Params, context?: HttpContext): Observable<Array<{
[key: string]: any;
}>> {
    return this.listResidencesResidencesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<{
[key: string]: any;
}>>): Array<{
[key: string]: any;
}> => r.body)
    );
  }

  /** Path part for operation `getResidenceResidencesResidenceIdGet()` */
  static readonly GetResidenceResidencesResidenceIdGetPath = '/residences/{residence_id}';

  /**
   * Get Residence.
   *
   * Detalle de una residencia si el usuario tiene acceso (o es superadmin).
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getResidenceResidencesResidenceIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getResidenceResidencesResidenceIdGet$Response(params: GetResidenceResidencesResidenceIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: any;
}>> {
    return getResidenceResidencesResidenceIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Residence.
   *
   * Detalle de una residencia si el usuario tiene acceso (o es superadmin).
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getResidenceResidencesResidenceIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getResidenceResidencesResidenceIdGet(params: GetResidenceResidencesResidenceIdGet$Params, context?: HttpContext): Observable<{
[key: string]: any;
}> {
    return this.getResidenceResidencesResidenceIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: any;
}>): {
[key: string]: any;
} => r.body)
    );
  }

}

================================================================================
ARCHIVO: src/openapi/generated/services/residents.service.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/services/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { changeBedResidentsResidentIdBedPatch } from '../fn/residents/change-bed-residents-resident-id-bed-patch';
import { ChangeBedResidentsResidentIdBedPatch$Params } from '../fn/residents/change-bed-residents-resident-id-bed-patch';
import { createResidentResidentsPost } from '../fn/residents/create-resident-residents-post';
import { CreateResidentResidentsPost$Params } from '../fn/residents/create-resident-residents-post';
import { listResidentsResidentsGet } from '../fn/residents/list-residents-residents-get';
import { ListResidentsResidentsGet$Params } from '../fn/residents/list-residents-residents-get';
import { ResidentOut } from '../models/resident-out';

@Injectable({ providedIn: 'root' })
export class ResidentsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `listResidentsResidentsGet()` */
  static readonly ListResidentsResidentsGetPath = '/residents';

  /**
   * List Residents.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listResidentsResidentsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  listResidentsResidentsGet$Response(params?: ListResidentsResidentsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ResidentOut>>> {
    return listResidentsResidentsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List Residents.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listResidentsResidentsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listResidentsResidentsGet(params?: ListResidentsResidentsGet$Params, context?: HttpContext): Observable<Array<ResidentOut>> {
    return this.listResidentsResidentsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ResidentOut>>): Array<ResidentOut> => r.body)
    );
  }

  /** Path part for operation `createResidentResidentsPost()` */
  static readonly CreateResidentResidentsPostPath = '/residents';

  /**
   * Create Resident.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createResidentResidentsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createResidentResidentsPost$Response(params: CreateResidentResidentsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<ResidentOut>> {
    return createResidentResidentsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Resident.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createResidentResidentsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createResidentResidentsPost(params: CreateResidentResidentsPost$Params, context?: HttpContext): Observable<ResidentOut> {
    return this.createResidentResidentsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<ResidentOut>): ResidentOut => r.body)
    );
  }

  /** Path part for operation `changeBedResidentsResidentIdBedPatch()` */
  static readonly ChangeBedResidentsResidentIdBedPatchPath = '/residents/{resident_id}/bed';

  /**
   * Change Bed.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changeBedResidentsResidentIdBedPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeBedResidentsResidentIdBedPatch$Response(params: ChangeBedResidentsResidentIdBedPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<ResidentOut>> {
    return changeBedResidentsResidentIdBedPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Change Bed.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changeBedResidentsResidentIdBedPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeBedResidentsResidentIdBedPatch(params: ChangeBedResidentsResidentIdBedPatch$Params, context?: HttpContext): Observable<ResidentOut> {
    return this.changeBedResidentsResidentIdBedPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<ResidentOut>): ResidentOut => r.body)
    );
  }

}

================================================================================
ARCHIVO: src/openapi/generated/services/structure.service.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/services/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { bedsStructureBedsRoomIdGet } from '../fn/structure/beds-structure-beds-room-id-get';
import { BedsStructureBedsRoomIdGet$Params } from '../fn/structure/beds-structure-beds-room-id-get';
import { floorsStructureFloorsResidenceIdGet } from '../fn/structure/floors-structure-floors-residence-id-get';
import { FloorsStructureFloorsResidenceIdGet$Params } from '../fn/structure/floors-structure-floors-residence-id-get';
import { roomsStructureRoomsFloorIdGet } from '../fn/structure/rooms-structure-rooms-floor-id-get';
import { RoomsStructureRoomsFloorIdGet$Params } from '../fn/structure/rooms-structure-rooms-floor-id-get';

@Injectable({ providedIn: 'root' })
export class StructureService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `floorsStructureFloorsResidenceIdGet()` */
  static readonly FloorsStructureFloorsResidenceIdGetPath = '/structure/floors/{residence_id}';

  /**
   * Floors.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `floorsStructureFloorsResidenceIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  floorsStructureFloorsResidenceIdGet$Response(params: FloorsStructureFloorsResidenceIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return floorsStructureFloorsResidenceIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Floors.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `floorsStructureFloorsResidenceIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  floorsStructureFloorsResidenceIdGet(params: FloorsStructureFloorsResidenceIdGet$Params, context?: HttpContext): Observable<any> {
    return this.floorsStructureFloorsResidenceIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `roomsStructureRoomsFloorIdGet()` */
  static readonly RoomsStructureRoomsFloorIdGetPath = '/structure/rooms/{floor_id}';

  /**
   * Rooms.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `roomsStructureRoomsFloorIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomsStructureRoomsFloorIdGet$Response(params: RoomsStructureRoomsFloorIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return roomsStructureRoomsFloorIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Rooms.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `roomsStructureRoomsFloorIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomsStructureRoomsFloorIdGet(params: RoomsStructureRoomsFloorIdGet$Params, context?: HttpContext): Observable<any> {
    return this.roomsStructureRoomsFloorIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `bedsStructureBedsRoomIdGet()` */
  static readonly BedsStructureBedsRoomIdGetPath = '/structure/beds/{room_id}';

  /**
   * Beds.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bedsStructureBedsRoomIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  bedsStructureBedsRoomIdGet$Response(params: BedsStructureBedsRoomIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return bedsStructureBedsRoomIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Beds.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bedsStructureBedsRoomIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bedsStructureBedsRoomIdGet(params: BedsStructureBedsRoomIdGet$Params, context?: HttpContext): Observable<any> {
    return this.bedsStructureBedsRoomIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

}

================================================================================
ARCHIVO: src/openapi/generated/services/tags.service.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/services/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { listTagsTagsGet } from '../fn/tags/list-tags-tags-get';
import { ListTagsTagsGet$Params } from '../fn/tags/list-tags-tags-get';

@Injectable({ providedIn: 'root' })
export class TagsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `listTagsTagsGet()` */
  static readonly ListTagsTagsGetPath = '/tags';

  /**
   * List Tags.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listTagsTagsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  listTagsTagsGet$Response(params?: ListTagsTagsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return listTagsTagsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List Tags.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listTagsTagsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listTagsTagsGet(params?: ListTagsTagsGet$Params, context?: HttpContext): Observable<any> {
    return this.listTagsTagsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

}

================================================================================
ARCHIVO: src/openapi/generated/services/tasks.service.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/services/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { applyTaskTasksApplicationsPost } from '../fn/tasks/apply-task-tasks-applications-post';
import { ApplyTaskTasksApplicationsPost$Params } from '../fn/tasks/apply-task-tasks-applications-post';
import { createCategoryTasksCategoriesPost } from '../fn/tasks/create-category-tasks-categories-post';
import { CreateCategoryTasksCategoriesPost$Params } from '../fn/tasks/create-category-tasks-categories-post';
import { createTemplateTasksTemplatesPost } from '../fn/tasks/create-template-tasks-templates-post';
import { CreateTemplateTasksTemplatesPost$Params } from '../fn/tasks/create-template-tasks-templates-post';
import { deleteApplicationTasksApplicationsApplicationIdDelete } from '../fn/tasks/delete-application-tasks-applications-application-id-delete';
import { DeleteApplicationTasksApplicationsApplicationIdDelete$Params } from '../fn/tasks/delete-application-tasks-applications-application-id-delete';
import { deleteCategoryTasksCategoriesCategoryIdDelete } from '../fn/tasks/delete-category-tasks-categories-category-id-delete';
import { DeleteCategoryTasksCategoriesCategoryIdDelete$Params } from '../fn/tasks/delete-category-tasks-categories-category-id-delete';
import { deleteTemplateTasksTemplatesTemplateIdDelete } from '../fn/tasks/delete-template-tasks-templates-template-id-delete';
import { DeleteTemplateTasksTemplatesTemplateIdDelete$Params } from '../fn/tasks/delete-template-tasks-templates-template-id-delete';
import { listApplicationsTasksApplicationsGet } from '../fn/tasks/list-applications-tasks-applications-get';
import { ListApplicationsTasksApplicationsGet$Params } from '../fn/tasks/list-applications-tasks-applications-get';
import { listCategoriesTasksCategoriesGet } from '../fn/tasks/list-categories-tasks-categories-get';
import { ListCategoriesTasksCategoriesGet$Params } from '../fn/tasks/list-categories-tasks-categories-get';
import { listTemplatesTasksTemplatesGet } from '../fn/tasks/list-templates-tasks-templates-get';
import { ListTemplatesTasksTemplatesGet$Params } from '../fn/tasks/list-templates-tasks-templates-get';
import { TaskApplicationOut } from '../models/task-application-out';
import { TaskCategoryOut } from '../models/task-category-out';
import { TaskTemplateOut } from '../models/task-template-out';
import { updateApplicationTasksApplicationsApplicationIdPatch } from '../fn/tasks/update-application-tasks-applications-application-id-patch';
import { UpdateApplicationTasksApplicationsApplicationIdPatch$Params } from '../fn/tasks/update-application-tasks-applications-application-id-patch';
import { updateCategoryTasksCategoriesCategoryIdPatch } from '../fn/tasks/update-category-tasks-categories-category-id-patch';
import { UpdateCategoryTasksCategoriesCategoryIdPatch$Params } from '../fn/tasks/update-category-tasks-categories-category-id-patch';
import { updateTemplateTasksTemplatesTemplateIdPatch } from '../fn/tasks/update-template-tasks-templates-template-id-patch';
import { UpdateTemplateTasksTemplatesTemplateIdPatch$Params } from '../fn/tasks/update-template-tasks-templates-template-id-patch';

@Injectable({ providedIn: 'root' })
export class TasksService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `listCategoriesTasksCategoriesGet()` */
  static readonly ListCategoriesTasksCategoriesGetPath = '/tasks/categories';

  /**
   * List Categories.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listCategoriesTasksCategoriesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  listCategoriesTasksCategoriesGet$Response(params?: ListCategoriesTasksCategoriesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TaskCategoryOut>>> {
    return listCategoriesTasksCategoriesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List Categories.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listCategoriesTasksCategoriesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listCategoriesTasksCategoriesGet(params?: ListCategoriesTasksCategoriesGet$Params, context?: HttpContext): Observable<Array<TaskCategoryOut>> {
    return this.listCategoriesTasksCategoriesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TaskCategoryOut>>): Array<TaskCategoryOut> => r.body)
    );
  }

  /** Path part for operation `createCategoryTasksCategoriesPost()` */
  static readonly CreateCategoryTasksCategoriesPostPath = '/tasks/categories';

  /**
   * Create Category.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createCategoryTasksCategoriesPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createCategoryTasksCategoriesPost$Response(params: CreateCategoryTasksCategoriesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskCategoryOut>> {
    return createCategoryTasksCategoriesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Category.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createCategoryTasksCategoriesPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createCategoryTasksCategoriesPost(params: CreateCategoryTasksCategoriesPost$Params, context?: HttpContext): Observable<TaskCategoryOut> {
    return this.createCategoryTasksCategoriesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskCategoryOut>): TaskCategoryOut => r.body)
    );
  }

  /** Path part for operation `deleteCategoryTasksCategoriesCategoryIdDelete()` */
  static readonly DeleteCategoryTasksCategoriesCategoryIdDeletePath = '/tasks/categories/{category_id}';

  /**
   * Delete Category.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCategoryTasksCategoriesCategoryIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCategoryTasksCategoriesCategoryIdDelete$Response(params: DeleteCategoryTasksCategoriesCategoryIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteCategoryTasksCategoriesCategoryIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete Category.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCategoryTasksCategoriesCategoryIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCategoryTasksCategoriesCategoryIdDelete(params: DeleteCategoryTasksCategoriesCategoryIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.deleteCategoryTasksCategoriesCategoryIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `updateCategoryTasksCategoriesCategoryIdPatch()` */
  static readonly UpdateCategoryTasksCategoriesCategoryIdPatchPath = '/tasks/categories/{category_id}';

  /**
   * Update Category.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCategoryTasksCategoriesCategoryIdPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCategoryTasksCategoriesCategoryIdPatch$Response(params: UpdateCategoryTasksCategoriesCategoryIdPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskCategoryOut>> {
    return updateCategoryTasksCategoriesCategoryIdPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Category.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCategoryTasksCategoriesCategoryIdPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCategoryTasksCategoriesCategoryIdPatch(params: UpdateCategoryTasksCategoriesCategoryIdPatch$Params, context?: HttpContext): Observable<TaskCategoryOut> {
    return this.updateCategoryTasksCategoriesCategoryIdPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskCategoryOut>): TaskCategoryOut => r.body)
    );
  }

  /** Path part for operation `listTemplatesTasksTemplatesGet()` */
  static readonly ListTemplatesTasksTemplatesGetPath = '/tasks/templates';

  /**
   * List Templates.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listTemplatesTasksTemplatesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  listTemplatesTasksTemplatesGet$Response(params?: ListTemplatesTasksTemplatesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TaskTemplateOut>>> {
    return listTemplatesTasksTemplatesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List Templates.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listTemplatesTasksTemplatesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listTemplatesTasksTemplatesGet(params?: ListTemplatesTasksTemplatesGet$Params, context?: HttpContext): Observable<Array<TaskTemplateOut>> {
    return this.listTemplatesTasksTemplatesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TaskTemplateOut>>): Array<TaskTemplateOut> => r.body)
    );
  }

  /** Path part for operation `createTemplateTasksTemplatesPost()` */
  static readonly CreateTemplateTasksTemplatesPostPath = '/tasks/templates';

  /**
   * Create Template.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTemplateTasksTemplatesPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTemplateTasksTemplatesPost$Response(params: CreateTemplateTasksTemplatesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskTemplateOut>> {
    return createTemplateTasksTemplatesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Template.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTemplateTasksTemplatesPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTemplateTasksTemplatesPost(params: CreateTemplateTasksTemplatesPost$Params, context?: HttpContext): Observable<TaskTemplateOut> {
    return this.createTemplateTasksTemplatesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskTemplateOut>): TaskTemplateOut => r.body)
    );
  }

  /** Path part for operation `deleteTemplateTasksTemplatesTemplateIdDelete()` */
  static readonly DeleteTemplateTasksTemplatesTemplateIdDeletePath = '/tasks/templates/{template_id}';

  /**
   * Delete Template.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTemplateTasksTemplatesTemplateIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTemplateTasksTemplatesTemplateIdDelete$Response(params: DeleteTemplateTasksTemplatesTemplateIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteTemplateTasksTemplatesTemplateIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete Template.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTemplateTasksTemplatesTemplateIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTemplateTasksTemplatesTemplateIdDelete(params: DeleteTemplateTasksTemplatesTemplateIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.deleteTemplateTasksTemplatesTemplateIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `updateTemplateTasksTemplatesTemplateIdPatch()` */
  static readonly UpdateTemplateTasksTemplatesTemplateIdPatchPath = '/tasks/templates/{template_id}';

  /**
   * Update Template.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTemplateTasksTemplatesTemplateIdPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTemplateTasksTemplatesTemplateIdPatch$Response(params: UpdateTemplateTasksTemplatesTemplateIdPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskTemplateOut>> {
    return updateTemplateTasksTemplatesTemplateIdPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Template.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTemplateTasksTemplatesTemplateIdPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTemplateTasksTemplatesTemplateIdPatch(params: UpdateTemplateTasksTemplatesTemplateIdPatch$Params, context?: HttpContext): Observable<TaskTemplateOut> {
    return this.updateTemplateTasksTemplatesTemplateIdPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskTemplateOut>): TaskTemplateOut => r.body)
    );
  }

  /** Path part for operation `listApplicationsTasksApplicationsGet()` */
  static readonly ListApplicationsTasksApplicationsGetPath = '/tasks/applications';

  /**
   * List Applications.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listApplicationsTasksApplicationsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  listApplicationsTasksApplicationsGet$Response(params?: ListApplicationsTasksApplicationsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TaskApplicationOut>>> {
    return listApplicationsTasksApplicationsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List Applications.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listApplicationsTasksApplicationsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listApplicationsTasksApplicationsGet(params?: ListApplicationsTasksApplicationsGet$Params, context?: HttpContext): Observable<Array<TaskApplicationOut>> {
    return this.listApplicationsTasksApplicationsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TaskApplicationOut>>): Array<TaskApplicationOut> => r.body)
    );
  }

  /** Path part for operation `applyTaskTasksApplicationsPost()` */
  static readonly ApplyTaskTasksApplicationsPostPath = '/tasks/applications';

  /**
   * Apply Task.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `applyTaskTasksApplicationsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  applyTaskTasksApplicationsPost$Response(params: ApplyTaskTasksApplicationsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskApplicationOut>> {
    return applyTaskTasksApplicationsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Apply Task.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `applyTaskTasksApplicationsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  applyTaskTasksApplicationsPost(params: ApplyTaskTasksApplicationsPost$Params, context?: HttpContext): Observable<TaskApplicationOut> {
    return this.applyTaskTasksApplicationsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskApplicationOut>): TaskApplicationOut => r.body)
    );
  }

  /** Path part for operation `deleteApplicationTasksApplicationsApplicationIdDelete()` */
  static readonly DeleteApplicationTasksApplicationsApplicationIdDeletePath = '/tasks/applications/{application_id}';

  /**
   * Delete Application.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteApplicationTasksApplicationsApplicationIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteApplicationTasksApplicationsApplicationIdDelete$Response(params: DeleteApplicationTasksApplicationsApplicationIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteApplicationTasksApplicationsApplicationIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete Application.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteApplicationTasksApplicationsApplicationIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteApplicationTasksApplicationsApplicationIdDelete(params: DeleteApplicationTasksApplicationsApplicationIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.deleteApplicationTasksApplicationsApplicationIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `updateApplicationTasksApplicationsApplicationIdPatch()` */
  static readonly UpdateApplicationTasksApplicationsApplicationIdPatchPath = '/tasks/applications/{application_id}';

  /**
   * Update Application.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateApplicationTasksApplicationsApplicationIdPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateApplicationTasksApplicationsApplicationIdPatch$Response(params: UpdateApplicationTasksApplicationsApplicationIdPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskApplicationOut>> {
    return updateApplicationTasksApplicationsApplicationIdPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Application.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateApplicationTasksApplicationsApplicationIdPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateApplicationTasksApplicationsApplicationIdPatch(params: UpdateApplicationTasksApplicationsApplicationIdPatch$Params, context?: HttpContext): Observable<TaskApplicationOut> {
    return this.updateApplicationTasksApplicationsApplicationIdPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskApplicationOut>): TaskApplicationOut => r.body)
    );
  }

}

================================================================================
ARCHIVO: src/openapi/generated/strict-http-response.ts
UBICACIÓN EN ÁRBOL: src/openapi/generated/
================================================================================
/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpResponse } from '@angular/common/http';

/**
 * Constrains the http response to not have the body defined as `T | null`, but `T` only.
 */
export type StrictHttpResponse<T> = HttpResponse<T> & {
  readonly body: T;
}

================================================================================
ARCHIVO: src/styles.scss
UBICACIÓN EN ÁRBOL: src/
================================================================================

// Include theming for Angular Material with `mat.theme()`.
// This Sass mixin will define CSS variables that are used for styling Angular Material
// components according to the Material 3 design spec.
// Learn more about theming and how to use it for your application's
// custom components at https://material.angular.dev/guide/theming
@use '@angular/material' as mat;

html {
  @include mat.theme((
    color: (
      primary: mat.$azure-palette,
      tertiary: mat.$blue-palette,
    ),
    typography: Roboto,
    density: 0,
  ));
}

body {
  // Default the application to a light color theme. This can be changed to
  // `dark` to enable the dark color theme, or to `light dark` to defer to the
  // user's system settings.
  color-scheme: light;

  // Set a default background, font and text colors for the application using
  // Angular Material's system-level CSS variables. Learn more about these
  // variables at https://material.angular.dev/guide/system-variables
  background-color: var(--mat-sys-surface);
  color: var(--mat-sys-on-surface);
  font: var(--mat-sys-body-medium);

  // Reset the user agent margin.
  margin: 0;
}
/* You can add global styles to this file, and also import other style files */

html, body { height: 100%; }
body { margin: 0; font-family: Roboto, "Helvetica Neue", sans-serif; }


################################################################################
#                            LIBRERÍAS (projects/)                            #
################################################################################

================================================================================
                              LIBRERÍA: core
================================================================================

================================================================================
ARCHIVO: projects/core/src/lib/guards/auth.guard.ts
UBICACIÓN EN ÁRBOL: projects/core/src/lib/guards/
================================================================================
import { inject } from '@angular/core';
import { Router, type CanActivateFn } from '@angular/router';
import { AuthService } from '../services/auth.service';

export const authGuard: CanActivateFn = () => {
  const authService = inject(AuthService);
  const router = inject(Router);

  if (authService.isAuthenticated()) {
    return true;
  }

  router.navigate(['/login']);
  return false;
};

================================================================================
ARCHIVO: projects/core/src/lib/guards/residence.guard.ts
UBICACIÓN EN ÁRBOL: projects/core/src/lib/guards/
================================================================================
import { inject } from '@angular/core';
import { Router, type CanActivateFn } from '@angular/router';
import { AuthService } from '../services/auth.service';
import { ResidenceService } from '../services/residence.service';

export const residenceGuard: CanActivateFn = () => {
  const authService = inject(AuthService);
  const residenceService = inject(ResidenceService);
  const router = inject(Router);

  // Superadmin no necesita seleccionar residencia
  if (authService.isSuperAdmin()) {
    return true;
  }

  // Si necesita seleccionar residencia, redirigir
  if (residenceService.needsResidenceSelection()) {
    router.navigate(['/select-residence']);
    return false;
  }

  return true;
};

================================================================================
ARCHIVO: projects/core/src/lib/guards/role.guard.ts
UBICACIÓN EN ÁRBOL: projects/core/src/lib/guards/
================================================================================
import { inject } from '@angular/core';
import { Router, type CanActivateFn } from '@angular/router';
import { AuthService } from '../services/auth.service';

export const roleGuard = (allowedRoles: string[]): CanActivateFn => {
  return () => {
    const authService = inject(AuthService);
    const router = inject(Router);

    const userRole = authService.userRole();

    if (!userRole || !allowedRoles.includes(userRole)) {
      router.navigate(['/unauthorized']);
      return false;
    }

    return true;
  };
};

================================================================================
ARCHIVO: projects/core/src/lib/index.ts
UBICACIÓN EN ÁRBOL: projects/core/src/lib/
================================================================================
export * from './guards/auth.guard';
export * from './guards/residence.guard';
export * from './guards/role.guard';
export * from './interceptors/auth.interceptor';
export * from './interceptors/residence.interceptor';
export * from './services/auth.service';
export * from './services/base-crud.service';
export * from './services/residence.service';
export * from './services/residents-data.service';

================================================================================
ARCHIVO: projects/core/src/lib/interceptors/auth.interceptor.ts
UBICACIÓN EN ÁRBOL: projects/core/src/lib/interceptors/
================================================================================

Te ayudo a configurar ng-openapi-gen para consumir tu API FastAPI en Angular 20. Primero, vamos a verificar el esquema OpenAPI y luego configurar el generador.


Error al obtener http://127.0.0.1:8000/openapi.json
Basándome en el código FastAPI que has proporcionado, puedo ayudarte a configurar ng-openapi-gen para generar el cliente API. Te haré una configuración completa con las mejores prácticas para Angular 20.

1. Instalación de ng-openapi-gen
Instalación de ng-openapi-gen
Código 
2. Configuración de ng-openapi-gen
Configuración ng-openapi-gen.json
Código 
3. Scripts de NPM para generar la API
Scripts en package.json
Código 
4. Configuración del módulo API en Angular
Configuración API Provider
Código 
5. Interceptor para autenticación con JWT
Auth Interceptor para JWT
Código 
6. Servicios con Signals de Angular 20
Auth Service con Signals
Código 
7. Servicio para gestión de residencias
Residence Service con Signals
Código 
8. Guards para protección de rutas
Guards de autenticación y autorización
Código 
9. Configuración principal en main.ts
Configuración en main.ts
Código 
10. Componente de ejemplo con Signals
Dashboard Component con Signals
Código 


veo que no pudiste acceder  openapi.json.. 


// src/app/core/interceptors/auth.interceptor.ts
import { HttpInterceptorFn } from '@angular/common/http';
import { inject } from '@angular/core';
import { AuthService } from '../services/auth.service';

export const authInterceptor: HttpInterceptorFn = (req, next) => {
  const authService = inject(AuthService);
  const token = authService.getToken();

  if (token) {
    const authReq = req.clone({
      headers: req.headers.set('Authorization', `Bearer ${token}`)
    });
    return next(authReq);
  }

  return next(req);
};

================================================================================
ARCHIVO: projects/core/src/lib/interceptors/residence.interceptor.ts
UBICACIÓN EN ÁRBOL: projects/core/src/lib/interceptors/
================================================================================
import { HttpInterceptorFn } from '@angular/common/http';
import { inject } from '@angular/core';
import { ResidenceService } from '../services/residence.service';

export const residenceInterceptor: HttpInterceptorFn = (req, next) => {
  const residenceService = inject(ResidenceService);
  const selectedResidenceId = residenceService.selectedResidenceId();

  if (selectedResidenceId && !req.headers.has('X-Residence-Id')) {
    const residenceReq = req.clone({
      headers: req.headers.set('X-Residence-Id', selectedResidenceId),
    });
    return next(residenceReq);
  }

  return next(req);
};

================================================================================
ARCHIVO: projects/core/src/lib/services/auth.service.ts
UBICACIÓN EN ÁRBOL: projects/core/src/lib/services/
================================================================================
// src/app/core/services/auth.service.ts
import { Injectable, signal, computed, inject } from '@angular/core';
import { Router } from '@angular/router';
import { catchError, tap, of, Observable } from 'rxjs';

export interface AuthState {
  user: Me | null;
  token: string | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
}

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private readonly apiAuth = inject(ApiAuthService);
  private readonly router = inject(Router);

  // Signals para el estado de autenticación
  private readonly _authState = signal<AuthState>({
    user: null,
    token: this.getStoredToken(),
    isAuthenticated: false,
    isLoading: false,
    error: null,
  });

  // Computed signals
  readonly authState = this._authState.asReadonly();
  readonly user = computed(() => this._authState().user);
  readonly token = computed(() => this._authState().token);
  readonly isAuthenticated = computed(() => this._authState().isAuthenticated);
  readonly isLoading = computed(() => this._authState().isLoading);
  readonly error = computed(() => this._authState().error);
  readonly userRole = computed(() => this._authState().user?.role);
  readonly isSuperAdmin = computed(() => this.userRole() === 'superadmin');
  readonly isManager = computed(() => this.userRole() === 'manager');
  readonly isProfessional = computed(() => this.userRole() === 'professional');

  constructor() {
    // Verificar token al inicializar
    const token = this.getStoredToken();
    if (token) {
      this.validateToken();
    }
  }

  login(credentials: LoginRequest): Observable<TokenResponse> {
    this.setLoading(true);
    this.clearError();

    return this.apiAuth.login(credentials).pipe(
      tap((response) => {
        this.setToken(response.access_token);
        this.loadUserProfile();
      }),
      catchError((error) => {
        this.setError('Credenciales inválidas');
        this.setLoading(false);
        return of();
      })
    );
  }

  logout(): void {
    this.clearAuth();
    this.router.navigate(['/login']);
  }

  getToken(): string | null {
    return this._authState().token;
  }

  private loadUserProfile(): void {
    this.apiAuth
      .me()
      .pipe(
        tap((user) => {
          this._authState.update((state) => ({
            ...state,
            user,
            isAuthenticated: true,
            isLoading: false,
          }));
        }),
        catchError((error) => {
          this.clearAuth();
          return of();
        })
      )
      .subscribe();
  }

  private validateToken(): void {
    this.setLoading(true);
    this.loadUserProfile();
  }

  private setToken(token: string): void {
    localStorage.setItem('auth_token', token);
    this._authState.update((state) => ({
      ...state,
      token,
    }));
  }

  private getStoredToken(): string | null {
    return localStorage.getItem('auth_token');
  }

  private clearAuth(): void {
    localStorage.removeItem('auth_token');
    this._authState.set({
      user: null,
      token: null,
      isAuthenticated: false,
      isLoading: false,
      error: null,
    });
  }

  private setLoading(isLoading: boolean): void {
    this._authState.update((state) => ({ ...state, isLoading }));
  }

  private setError(error: string): void {
    this._authState.update((state) => ({ ...state, error, isLoading: false }));
  }

  private clearError(): void {
    this._authState.update((state) => ({ ...state, error: null }));
  }
}

================================================================================
ARCHIVO: projects/core/src/lib/services/base-crud.service.ts
UBICACIÓN EN ÁRBOL: projects/core/src/lib/services/
================================================================================
import { Injectable, signal, computed } from '@angular/core';
import { Observable, BehaviorSubject, combineLatest } from 'rxjs';
import { map, tap, catchError, startWith } from 'rxjs/operators';

export interface CrudState<T> {
  items: T[];
  selectedItem: T | null;
  isLoading: boolean;
  error: string | null;
  filters: Record<string, any>;
  pagination: {
    page: number;
    pageSize: number;
    total: number;
  };
}

export abstract class BaseCrudService<T extends { id: string }> {
  // Estado principal
  protected readonly _state = signal<CrudState<T>>({
    items: [],
    selectedItem: null,
    isLoading: false,
    error: null,
    filters: {},
    pagination: {
      page: 1,
      pageSize: 50,
      total: 0,
    },
  });

  // Computed signals públicos
  readonly state = this._state.asReadonly();
  readonly items = computed(() => this._state().items);
  readonly selectedItem = computed(() => this._state().selectedItem);
  readonly isLoading = computed(() => this._state().isLoading);
  readonly error = computed(() => this._state().error);
  readonly filters = computed(() => this._state().filters);
  readonly pagination = computed(() => this._state().pagination);
  readonly isEmpty = computed(() => this.items().length === 0);
  readonly hasError = computed(() => !!this.error());

  // Métodos abstractos que deben implementar las clases hijas
  abstract getAll(params?: any): Observable<T[]>;
  abstract getById(id: string): Observable<T>;
  abstract create(item: Partial<T>): Observable<T>;
  abstract update(id: string, item: Partial<T>): Observable<T>;
  abstract delete(id: string): Observable<void>;

  // Métodos comunes
  loadAll(params?: any): Observable<T[]> {
    this.setLoading(true);
    this.clearError();

    return this.getAll(params).pipe(
      tap((items) => {
        this._state.update((state) => ({
          ...state,
          items,
          isLoading: false,
        }));
      }),
      catchError((error) => {
        this.setError('Error cargando datos');
        this.setLoading(false);
        throw error;
      })
    );
  }

  loadById(id: string): Observable<T> {
    this.setLoading(true);
    this.clearError();

    return this.getById(id).pipe(
      tap((item) => {
        this._state.update((state) => ({
          ...state,
          selectedItem: item,
          isLoading: false,
        }));
      }),
      catchError((error) => {
        this.setError('Error cargando elemento');
        this.setLoading(false);
        throw error;
      })
    );
  }

  createItem(item: Partial<T>): Observable<T> {
    this.setLoading(true);
    this.clearError();

    return this.create(item).pipe(
      tap((newItem) => {
        this._state.update((state) => ({
          ...state,
          items: [...state.items, newItem],
          isLoading: false,
        }));
      }),
      catchError((error) => {
        this.setError('Error creando elemento');
        this.setLoading(false);
        throw error;
      })
    );
  }

  updateItem(id: string, item: Partial<T>): Observable<T> {
    this.setLoading(true);
    this.clearError();

    return this.update(id, item).pipe(
      tap((updatedItem) => {
        this._state.update((state) => ({
          ...state,
          items: state.items.map((i) => (i.id === id ? updatedItem : i)),
          selectedItem: state.selectedItem?.id === id ? updatedItem : state.selectedItem,
          isLoading: false,
        }));
      }),
      catchError((error) => {
        this.setError('Error actualizando elemento');
        this.setLoading(false);
        throw error;
      })
    );
  }

  deleteItem(id: string): Observable<void> {
    this.setLoading(true);
    this.clearError();

    return this.delete(id).pipe(
      tap(() => {
        this._state.update((state) => ({
          ...state,
          items: state.items.filter((i) => i.id !== id),
          selectedItem: state.selectedItem?.id === id ? null : state.selectedItem,
          isLoading: false,
        }));
      }),
      catchError((error) => {
        this.setError('Error eliminando elemento');
        this.setLoading(false);
        throw error;
      })
    );
  }

  selectItem(item: T | null): void {
    this._state.update((state) => ({
      ...state,
      selectedItem: item,
    }));
  }

  setFilters(filters: Record<string, any>): void {
    this._state.update((state) => ({
      ...state,
      filters: { ...state.filters, ...filters },
    }));
  }

  clearFilters(): void {
    this._state.update((state) => ({
      ...state,
      filters: {},
    }));
  }

  protected setLoading(isLoading: boolean): void {
    this._state.update((state) => ({ ...state, isLoading }));
  }

  protected setError(error: string | null): void {
    this._state.update((state) => ({ ...state, error, isLoading: false }));
  }

  protected clearError(): void {
    this._state.update((state) => ({ ...state, error: null }));
  }
}

================================================================================
ARCHIVO: projects/core/src/lib/services/residence.service.ts
UBICACIÓN EN ÁRBOL: projects/core/src/lib/services/
================================================================================
// src/app/core/services/residence.service.ts
import { Injectable, signal, computed, inject, linkedSignal } from '@angular/core';
import { toObservable } from '@angular/core/rxjs-interop';
import { Observable, switchMap, of, catchError, tap } from 'rxjs';
import { AuthService } from './auth.service';

export interface ResidenceState {
  residences: any[];
  selectedResidenceId: string | null;
  selectedResidence: any | null;
  isLoading: boolean;
  error: string | null;
}

@Injectable({
  providedIn: 'root',
})
export class ResidenceService {
  private readonly apiResidences = inject(ApiResidencesService);
  private readonly authService = inject(AuthService);

  // Estado principal
  private readonly _state = signal<ResidenceState>({
    residences: [],
    selectedResidenceId: this.getStoredResidenceId(),
    selectedResidence: null,
    isLoading: false,
    error: null,
  });

  // Computed signals
  readonly state = this._state.asReadonly();
  readonly residences = computed(() => this._state().residences);
  readonly selectedResidenceId = computed(() => this._state().selectedResidenceId);
  readonly selectedResidence = computed(() => this._state().selectedResidence);
  readonly isLoading = computed(() => this._state().isLoading);
  readonly error = computed(() => this._state().error);
  readonly hasMultipleResidences = computed(() => this.residences().length > 1);
  readonly needsResidenceSelection = computed(
    () =>
      !this.authService.isSuperAdmin() &&
      this.hasMultipleResidences() &&
      !this.selectedResidenceId()
  );

  // LinkedSignal para la residencia seleccionada
  private readonly _selectedResidenceDetails = linkedSignal(() => {
    const residenceId = this.selectedResidenceId();
    const residences = this.residences();

    if (!residenceId || !residences.length) return null;

    return residences.find((r) => r.id === residenceId) || null;
  });

  readonly selectedResidenceDetails = this._selectedResidenceDetails.asReadonly();

  constructor() {
    // Auto-cargar residencias cuando el usuario se autentica
    toObservable(this.authService.isAuthenticated)
      .pipe(switchMap((isAuth) => (isAuth ? this.loadUserResidences() : of(null))))
      .subscribe();
  }

  loadUserResidences(): Observable<any[]> {
    this.setLoading(true);
    this.clearError();

    return this.apiResidences.myResidences().pipe(
      tap((residences) => {
        this._state.update((state) => ({
          ...state,
          residences,
          isLoading: false,
        }));

        // Auto-seleccionar si solo hay una residencia
        if (residences.length === 1 && !this.selectedResidenceId()) {
          this.selectResidence(residences[0].id);
        }
      }),
      catchError((error) => {
        this.setError('Error cargando residencias');
        return of([]);
      })
    );
  }

  selectResidence(residenceId: string): void {
    const residence = this.residences().find((r) => r.id === residenceId);

    if (residence) {
      this._state.update((state) => ({
        ...state,
        selectedResidenceId: residenceId,
        selectedResidence: residence,
      }));

      this.storeSelectedResidenceId(residenceId);
    }
  }

  clearSelection(): void {
    this._state.update((state) => ({
      ...state,
      selectedResidenceId: null,
      selectedResidence: null,
    }));

    this.clearStoredResidenceId();
  }

  getResidenceById(id: string): Observable<any> {
    return this.apiResidences.getResidence({ residenceId: id });
  }

  private setLoading(isLoading: boolean): void {
    this._state.update((state) => ({ ...state, isLoading }));
  }

  private setError(error: string): void {
    this._state.update((state) => ({ ...state, error, isLoading: false }));
  }

  private clearError(): void {
    this._state.update((state) => ({ ...state, error: null }));
  }

  private getStoredResidenceId(): string | null {
    return localStorage.getItem('selected_residence_id');
  }

  private storeSelectedResidenceId(residenceId: string): void {
    localStorage.setItem('selected_residence_id', residenceId);
  }

  private clearStoredResidenceId(): void {
    localStorage.removeItem('selected_residence_id');
  }
}

================================================================================
ARCHIVO: projects/core/src/lib/services/residents-data.service.ts
UBICACIÓN EN ÁRBOL: projects/core/src/lib/services/
================================================================================
import { Injectable, inject } from '@angular/core';
import { Observable } from 'rxjs';
import { BaseCrudService } from './base-crud.service';

@Injectable({
  providedIn: 'root',
})
export class ResidentsDataService extends BaseCrudService<ResidentOut> {
  private readonly apiService = inject(ApiResidentsService);

  getAll(): Observable<ResidentOut[]> {
    return this.apiService.listResidents();
  }

  getById(id: string): Observable<ResidentOut> {
    // Nota: ajustar según la interfaz real generada
    return this.apiService.getResident(id);
  }

  create(item: ResidentCreate): Observable<ResidentOut> {
    return this.apiService.createResident(item);
  }

  update(id: string, item: ResidentUpdate): Observable<ResidentOut> {
    return this.apiService.updateResident(id, item);
  }

  delete(id: string): Observable<void> {
    return this.apiService.deleteResident(id);
  }

  // Métodos específicos para residentes
  readonly activeResidents = computed(() => this.items().filter((r) => r.status === 'active'));

  readonly residentsByStatus = computed(() => {
    const items = this.items();
    return {
      active: items.filter((r) => r.status === 'active'),
      discharged: items.filter((r) => r.status === 'discharged'),
      deceased: items.filter((r) => r.status === 'deceased'),
    };
  });

  changeBed(residentId: string, bedId: string): Observable<ResidentOut> {
    return this.apiService.changeBed(residentId, { bed_id: bedId }).pipe(
      tap((updatedResident) => {
        this._state.update((state) => ({
          ...state,
          items: state.items.map((r) => (r.id === residentId ? updatedResident : r)),
        }));
      })
    );
  }
}

================================================================================
ARCHIVO: projects/core/src/public-api.ts
UBICACIÓN EN ÁRBOL: projects/core/src/
================================================================================
/*
 * Public API Surface of core
 */

export * from './lib/';
