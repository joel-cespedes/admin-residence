/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createDeviceDevicesPost } from '../fn/devices/create-device-devices-post';
import { CreateDeviceDevicesPost$Params } from '../fn/devices/create-device-devices-post';
import { DeviceOut } from '../models/device-out';
import { listDevicesDevicesGet } from '../fn/devices/list-devices-devices-get';
import { ListDevicesDevicesGet$Params } from '../fn/devices/list-devices-devices-get';

@Injectable({ providedIn: 'root' })
export class DevicesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `listDevicesDevicesGet()` */
  static readonly ListDevicesDevicesGetPath = '/devices';

  /**
   * List Devices.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listDevicesDevicesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  listDevicesDevicesGet$Response(
    params?: ListDevicesDevicesGet$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<Array<DeviceOut>>> {
    return listDevicesDevicesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List Devices.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listDevicesDevicesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listDevicesDevicesGet(params?: ListDevicesDevicesGet$Params, context?: HttpContext): Observable<Array<DeviceOut>> {
    return this.listDevicesDevicesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<DeviceOut>>): Array<DeviceOut> => r.body),
    );
  }

  /** Path part for operation `createDeviceDevicesPost()` */
  static readonly CreateDeviceDevicesPostPath = '/devices';

  /**
   * Create Device.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createDeviceDevicesPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createDeviceDevicesPost$Response(
    params: CreateDeviceDevicesPost$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<DeviceOut>> {
    return createDeviceDevicesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Device.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createDeviceDevicesPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createDeviceDevicesPost(params: CreateDeviceDevicesPost$Params, context?: HttpContext): Observable<DeviceOut> {
    return this.createDeviceDevicesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<DeviceOut>): DeviceOut => r.body),
    );
  }
}
