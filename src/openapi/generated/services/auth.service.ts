/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { loginAuthLoginPost } from '../fn/auth/login-auth-login-post';
import { LoginAuthLoginPost$Params } from '../fn/auth/login-auth-login-post';
import { Me } from '../models/me';
import { meAuthMeGet } from '../fn/auth/me-auth-me-get';
import { MeAuthMeGet$Params } from '../fn/auth/me-auth-me-get';
import { TokenResponse } from '../models/token-response';

@Injectable({ providedIn: 'root' })
export class AuthService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `loginAuthLoginPost()` */
  static readonly LoginAuthLoginPostPath = '/auth/login';

  /**
   * Login.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `loginAuthLoginPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  loginAuthLoginPost$Response(params: LoginAuthLoginPost$Params, context?: HttpContext): Observable<StrictHttpResponse<TokenResponse>> {
    return loginAuthLoginPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Login.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `loginAuthLoginPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  loginAuthLoginPost(params: LoginAuthLoginPost$Params, context?: HttpContext): Observable<TokenResponse> {
    return this.loginAuthLoginPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<TokenResponse>): TokenResponse => r.body)
    );
  }

  /** Path part for operation `meAuthMeGet()` */
  static readonly MeAuthMeGetPath = '/auth/me';

  /**
   * Me.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `meAuthMeGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  meAuthMeGet$Response(params?: MeAuthMeGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Me>> {
    return meAuthMeGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Me.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `meAuthMeGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  meAuthMeGet(params?: MeAuthMeGet$Params, context?: HttpContext): Observable<Me> {
    return this.meAuthMeGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Me>): Me => r.body)
    );
  }

}
