/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getResidenceResidencesResidenceIdGet } from '../fn/residences/get-residence-residences-residence-id-get';
import { GetResidenceResidencesResidenceIdGet$Params } from '../fn/residences/get-residence-residences-residence-id-get';
import { listResidencesResidencesGet } from '../fn/residences/list-residences-residences-get';
import { ListResidencesResidencesGet$Params } from '../fn/residences/list-residences-residences-get';
import { myResidencesResidencesMineGet } from '../fn/residences/my-residences-residences-mine-get';
import { MyResidencesResidencesMineGet$Params } from '../fn/residences/my-residences-residences-mine-get';

@Injectable({ providedIn: 'root' })
export class ResidencesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `myResidencesResidencesMineGet()` */
  static readonly MyResidencesResidencesMineGetPath = '/residences/mine';

  /**
   * My Residences.
   *
   * Residencias asignadas al usuario (manager / professional).
   * Superadmin: devuelve todas.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `myResidencesResidencesMineGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  myResidencesResidencesMineGet$Response(
    params?: MyResidencesResidencesMineGet$Params,
    context?: HttpContext,
  ): Observable<
    StrictHttpResponse<
      Array<{
        [key: string]: any;
      }>
    >
  > {
    return myResidencesResidencesMineGet(this.http, this.rootUrl, params, context);
  }

  /**
   * My Residences.
   *
   * Residencias asignadas al usuario (manager / professional).
   * Superadmin: devuelve todas.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `myResidencesResidencesMineGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  myResidencesResidencesMineGet(
    params?: MyResidencesResidencesMineGet$Params,
    context?: HttpContext,
  ): Observable<
    Array<{
      [key: string]: any;
    }>
  > {
    return this.myResidencesResidencesMineGet$Response(params, context).pipe(
      map(
        (
          r: StrictHttpResponse<
            Array<{
              [key: string]: any;
            }>
          >,
        ): Array<{
          [key: string]: any;
        }> => r.body,
      ),
    );
  }

  /** Path part for operation `listResidencesResidencesGet()` */
  static readonly ListResidencesResidencesGetPath = '/residences';

  /**
   * List Residences.
   *
   * Listado: superadmin ve todas; otros, solo las propias (igual que /mine).
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listResidencesResidencesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  listResidencesResidencesGet$Response(
    params?: ListResidencesResidencesGet$Params,
    context?: HttpContext,
  ): Observable<
    StrictHttpResponse<
      Array<{
        [key: string]: any;
      }>
    >
  > {
    return listResidencesResidencesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List Residences.
   *
   * Listado: superadmin ve todas; otros, solo las propias (igual que /mine).
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listResidencesResidencesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listResidencesResidencesGet(
    params?: ListResidencesResidencesGet$Params,
    context?: HttpContext,
  ): Observable<
    Array<{
      [key: string]: any;
    }>
  > {
    return this.listResidencesResidencesGet$Response(params, context).pipe(
      map(
        (
          r: StrictHttpResponse<
            Array<{
              [key: string]: any;
            }>
          >,
        ): Array<{
          [key: string]: any;
        }> => r.body,
      ),
    );
  }

  /** Path part for operation `getResidenceResidencesResidenceIdGet()` */
  static readonly GetResidenceResidencesResidenceIdGetPath = '/residences/{residence_id}';

  /**
   * Get Residence.
   *
   * Detalle de una residencia si el usuario tiene acceso (o es superadmin).
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getResidenceResidencesResidenceIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getResidenceResidencesResidenceIdGet$Response(
    params: GetResidenceResidencesResidenceIdGet$Params,
    context?: HttpContext,
  ): Observable<
    StrictHttpResponse<{
      [key: string]: any;
    }>
  > {
    return getResidenceResidencesResidenceIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Residence.
   *
   * Detalle de una residencia si el usuario tiene acceso (o es superadmin).
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getResidenceResidencesResidenceIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getResidenceResidencesResidenceIdGet(
    params: GetResidenceResidencesResidenceIdGet$Params,
    context?: HttpContext,
  ): Observable<{
    [key: string]: any;
  }> {
    return this.getResidenceResidencesResidenceIdGet$Response(params, context).pipe(
      map(
        (
          r: StrictHttpResponse<{
            [key: string]: any;
          }>,
        ): {
          [key: string]: any;
        } => r.body,
      ),
    );
  }
}
