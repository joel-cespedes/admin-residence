/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { applyTaskTasksApplicationsPost } from '../fn/tasks/apply-task-tasks-applications-post';
import { ApplyTaskTasksApplicationsPost$Params } from '../fn/tasks/apply-task-tasks-applications-post';
import { createCategoryTasksCategoriesPost } from '../fn/tasks/create-category-tasks-categories-post';
import { CreateCategoryTasksCategoriesPost$Params } from '../fn/tasks/create-category-tasks-categories-post';
import { createTaskApplicationsBatchTasksApplicationsBatchPost } from '../fn/tasks/create-task-applications-batch-tasks-applications-batch-post';
import { CreateTaskApplicationsBatchTasksApplicationsBatchPost$Params } from '../fn/tasks/create-task-applications-batch-tasks-applications-batch-post';
import { createTemplateTasksTemplatesPost } from '../fn/tasks/create-template-tasks-templates-post';
import { CreateTemplateTasksTemplatesPost$Params } from '../fn/tasks/create-template-tasks-templates-post';
import { createVoiceApplicationTasksApplicationsVoicePost } from '../fn/tasks/create-voice-application-tasks-applications-voice-post';
import { CreateVoiceApplicationTasksApplicationsVoicePost$Params } from '../fn/tasks/create-voice-application-tasks-applications-voice-post';
import { deleteApplicationTasksApplicationsApplicationIdDelete } from '../fn/tasks/delete-application-tasks-applications-application-id-delete';
import { DeleteApplicationTasksApplicationsApplicationIdDelete$Params } from '../fn/tasks/delete-application-tasks-applications-application-id-delete';
import { deleteCategoryTasksCategoriesCategoryIdDelete } from '../fn/tasks/delete-category-tasks-categories-category-id-delete';
import { DeleteCategoryTasksCategoriesCategoryIdDelete$Params } from '../fn/tasks/delete-category-tasks-categories-category-id-delete';
import { deleteTemplateTasksTemplatesTemplateIdDelete } from '../fn/tasks/delete-template-tasks-templates-template-id-delete';
import { DeleteTemplateTasksTemplatesTemplateIdDelete$Params } from '../fn/tasks/delete-template-tasks-templates-template-id-delete';
import { getTaskApplicationsByResidentDateTasksApplicationsResidentResidentIdDateDateGet } from '../fn/tasks/get-task-applications-by-resident-date-tasks-applications-resident-resident-id-date-date-get';
import { GetTaskApplicationsByResidentDateTasksApplicationsResidentResidentIdDateDateGet$Params } from '../fn/tasks/get-task-applications-by-resident-date-tasks-applications-resident-resident-id-date-date-get';
import { getTaskApplicationsByResidentTasksResidentsResidentIdTaskApplicationsGet } from '../fn/tasks/get-task-applications-by-resident-tasks-residents-resident-id-task-applications-get';
import { GetTaskApplicationsByResidentTasksResidentsResidentIdTaskApplicationsGet$Params } from '../fn/tasks/get-task-applications-by-resident-tasks-residents-resident-id-task-applications-get';
import { getTaskApplicationsDailySummaryTasksApplicationsDailySummaryGet } from '../fn/tasks/get-task-applications-daily-summary-tasks-applications-daily-summary-get';
import { GetTaskApplicationsDailySummaryTasksApplicationsDailySummaryGet$Params } from '../fn/tasks/get-task-applications-daily-summary-tasks-applications-daily-summary-get';
import { getUserAssignersTasksUsersAssignersGet } from '../fn/tasks/get-user-assigners-tasks-users-assigners-get';
import { GetUserAssignersTasksUsersAssignersGet$Params } from '../fn/tasks/get-user-assigners-tasks-users-assigners-get';
import { listApplicationsSimpleTasksApplicationsSimpleGet } from '../fn/tasks/list-applications-simple-tasks-applications-simple-get';
import { ListApplicationsSimpleTasksApplicationsSimpleGet$Params } from '../fn/tasks/list-applications-simple-tasks-applications-simple-get';
import { listApplicationsTasksApplicationsGet } from '../fn/tasks/list-applications-tasks-applications-get';
import { ListApplicationsTasksApplicationsGet$Params } from '../fn/tasks/list-applications-tasks-applications-get';
import { listCategoriesSimpleTasksCategoriesSimpleGet } from '../fn/tasks/list-categories-simple-tasks-categories-simple-get';
import { ListCategoriesSimpleTasksCategoriesSimpleGet$Params } from '../fn/tasks/list-categories-simple-tasks-categories-simple-get';
import { listCategoriesTasksCategoriesGet } from '../fn/tasks/list-categories-tasks-categories-get';
import { ListCategoriesTasksCategoriesGet$Params } from '../fn/tasks/list-categories-tasks-categories-get';
import { listTemplatesSimpleTasksTemplatesSimpleGet } from '../fn/tasks/list-templates-simple-tasks-templates-simple-get';
import { ListTemplatesSimpleTasksTemplatesSimpleGet$Params } from '../fn/tasks/list-templates-simple-tasks-templates-simple-get';
import { listTemplatesTasksTemplatesGet } from '../fn/tasks/list-templates-tasks-templates-get';
import { ListTemplatesTasksTemplatesGet$Params } from '../fn/tasks/list-templates-tasks-templates-get';
import { PaginatedResponseTaskApplicationDailySummary } from '../models/paginated-response-task-application-daily-summary';
import { PaginatedResponseTaskApplicationOut } from '../models/paginated-response-task-application-out';
import { PaginatedResponseTaskCategoryOut } from '../models/paginated-response-task-category-out';
import { PaginatedResponseTaskTemplateOut } from '../models/paginated-response-task-template-out';
import { parseVoiceTranscriptTasksApplicationsParseVoicePost } from '../fn/tasks/parse-voice-transcript-tasks-applications-parse-voice-post';
import { ParseVoiceTranscriptTasksApplicationsParseVoicePost$Params } from '../fn/tasks/parse-voice-transcript-tasks-applications-parse-voice-post';
import { patchCategoryTasksCategoriesCategoryIdPatch } from '../fn/tasks/patch-category-tasks-categories-category-id-patch';
import { PatchCategoryTasksCategoriesCategoryIdPatch$Params } from '../fn/tasks/patch-category-tasks-categories-category-id-patch';
import { TaskApplicationBatchResponse } from '../models/task-application-batch-response';
import { TaskApplicationOut } from '../models/task-application-out';
import { TaskApplicationResidentDay } from '../models/task-application-resident-day';
import { TaskCategoryOut } from '../models/task-category-out';
import { TaskTemplateOut } from '../models/task-template-out';
import { updateApplicationTasksApplicationsApplicationIdPatch } from '../fn/tasks/update-application-tasks-applications-application-id-patch';
import { UpdateApplicationTasksApplicationsApplicationIdPatch$Params } from '../fn/tasks/update-application-tasks-applications-application-id-patch';
import { updateCategoryTasksCategoriesCategoryIdPut } from '../fn/tasks/update-category-tasks-categories-category-id-put';
import { UpdateCategoryTasksCategoriesCategoryIdPut$Params } from '../fn/tasks/update-category-tasks-categories-category-id-put';
import { updateTemplateTasksTemplatesTemplateIdPatch } from '../fn/tasks/update-template-tasks-templates-template-id-patch';
import { UpdateTemplateTasksTemplatesTemplateIdPatch$Params } from '../fn/tasks/update-template-tasks-templates-template-id-patch';
import { UserAssigner } from '../models/user-assigner';
import { VoiceApplicationResponse } from '../models/voice-application-response';
import { VoiceParseResponse } from '../models/voice-parse-response';

@Injectable({ providedIn: 'root' })
export class TasksService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `listCategoriesTasksCategoriesGet()` */
  static readonly ListCategoriesTasksCategoriesGetPath = '/tasks/categories';

  /**
   * List Categories.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listCategoriesTasksCategoriesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  listCategoriesTasksCategoriesGet$Response(params?: ListCategoriesTasksCategoriesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<PaginatedResponseTaskCategoryOut>> {
    return listCategoriesTasksCategoriesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List Categories.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listCategoriesTasksCategoriesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listCategoriesTasksCategoriesGet(params?: ListCategoriesTasksCategoriesGet$Params, context?: HttpContext): Observable<PaginatedResponseTaskCategoryOut> {
    return this.listCategoriesTasksCategoriesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaginatedResponseTaskCategoryOut>): PaginatedResponseTaskCategoryOut => r.body)
    );
  }

  /** Path part for operation `createCategoryTasksCategoriesPost()` */
  static readonly CreateCategoryTasksCategoriesPostPath = '/tasks/categories';

  /**
   * Create Category.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createCategoryTasksCategoriesPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createCategoryTasksCategoriesPost$Response(params: CreateCategoryTasksCategoriesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskCategoryOut>> {
    return createCategoryTasksCategoriesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Category.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createCategoryTasksCategoriesPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createCategoryTasksCategoriesPost(params: CreateCategoryTasksCategoriesPost$Params, context?: HttpContext): Observable<TaskCategoryOut> {
    return this.createCategoryTasksCategoriesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskCategoryOut>): TaskCategoryOut => r.body)
    );
  }

  /** Path part for operation `listCategoriesSimpleTasksCategoriesSimpleGet()` */
  static readonly ListCategoriesSimpleTasksCategoriesSimpleGetPath = '/tasks/categories/simple';

  /**
   * List Categories Simple.
   *
   * Legacy endpoint: List categories without pagination
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listCategoriesSimpleTasksCategoriesSimpleGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  listCategoriesSimpleTasksCategoriesSimpleGet$Response(params?: ListCategoriesSimpleTasksCategoriesSimpleGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TaskCategoryOut>>> {
    return listCategoriesSimpleTasksCategoriesSimpleGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List Categories Simple.
   *
   * Legacy endpoint: List categories without pagination
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listCategoriesSimpleTasksCategoriesSimpleGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listCategoriesSimpleTasksCategoriesSimpleGet(params?: ListCategoriesSimpleTasksCategoriesSimpleGet$Params, context?: HttpContext): Observable<Array<TaskCategoryOut>> {
    return this.listCategoriesSimpleTasksCategoriesSimpleGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TaskCategoryOut>>): Array<TaskCategoryOut> => r.body)
    );
  }

  /** Path part for operation `updateCategoryTasksCategoriesCategoryIdPut()` */
  static readonly UpdateCategoryTasksCategoriesCategoryIdPutPath = '/tasks/categories/{category_id}';

  /**
   * Update Category.
   *
   * Update a category
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCategoryTasksCategoriesCategoryIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCategoryTasksCategoriesCategoryIdPut$Response(params: UpdateCategoryTasksCategoriesCategoryIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskCategoryOut>> {
    return updateCategoryTasksCategoriesCategoryIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Category.
   *
   * Update a category
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCategoryTasksCategoriesCategoryIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCategoryTasksCategoriesCategoryIdPut(params: UpdateCategoryTasksCategoriesCategoryIdPut$Params, context?: HttpContext): Observable<TaskCategoryOut> {
    return this.updateCategoryTasksCategoriesCategoryIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskCategoryOut>): TaskCategoryOut => r.body)
    );
  }

  /** Path part for operation `deleteCategoryTasksCategoriesCategoryIdDelete()` */
  static readonly DeleteCategoryTasksCategoriesCategoryIdDeletePath = '/tasks/categories/{category_id}';

  /**
   * Delete Category.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCategoryTasksCategoriesCategoryIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCategoryTasksCategoriesCategoryIdDelete$Response(params: DeleteCategoryTasksCategoriesCategoryIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteCategoryTasksCategoriesCategoryIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete Category.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCategoryTasksCategoriesCategoryIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCategoryTasksCategoriesCategoryIdDelete(params: DeleteCategoryTasksCategoriesCategoryIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.deleteCategoryTasksCategoriesCategoryIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `patchCategoryTasksCategoriesCategoryIdPatch()` */
  static readonly PatchCategoryTasksCategoriesCategoryIdPatchPath = '/tasks/categories/{category_id}';

  /**
   * Patch Category.
   *
   * Patch a category (legacy endpoint)
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `patchCategoryTasksCategoriesCategoryIdPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  patchCategoryTasksCategoriesCategoryIdPatch$Response(params: PatchCategoryTasksCategoriesCategoryIdPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskCategoryOut>> {
    return patchCategoryTasksCategoriesCategoryIdPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Patch Category.
   *
   * Patch a category (legacy endpoint)
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `patchCategoryTasksCategoriesCategoryIdPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  patchCategoryTasksCategoriesCategoryIdPatch(params: PatchCategoryTasksCategoriesCategoryIdPatch$Params, context?: HttpContext): Observable<TaskCategoryOut> {
    return this.patchCategoryTasksCategoriesCategoryIdPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskCategoryOut>): TaskCategoryOut => r.body)
    );
  }

  /** Path part for operation `listTemplatesTasksTemplatesGet()` */
  static readonly ListTemplatesTasksTemplatesGetPath = '/tasks/templates';

  /**
   * List Templates.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listTemplatesTasksTemplatesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  listTemplatesTasksTemplatesGet$Response(params?: ListTemplatesTasksTemplatesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<PaginatedResponseTaskTemplateOut>> {
    return listTemplatesTasksTemplatesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List Templates.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listTemplatesTasksTemplatesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listTemplatesTasksTemplatesGet(params?: ListTemplatesTasksTemplatesGet$Params, context?: HttpContext): Observable<PaginatedResponseTaskTemplateOut> {
    return this.listTemplatesTasksTemplatesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaginatedResponseTaskTemplateOut>): PaginatedResponseTaskTemplateOut => r.body)
    );
  }

  /** Path part for operation `createTemplateTasksTemplatesPost()` */
  static readonly CreateTemplateTasksTemplatesPostPath = '/tasks/templates';

  /**
   * Create Template.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTemplateTasksTemplatesPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTemplateTasksTemplatesPost$Response(params: CreateTemplateTasksTemplatesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskTemplateOut>> {
    return createTemplateTasksTemplatesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Template.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTemplateTasksTemplatesPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTemplateTasksTemplatesPost(params: CreateTemplateTasksTemplatesPost$Params, context?: HttpContext): Observable<TaskTemplateOut> {
    return this.createTemplateTasksTemplatesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskTemplateOut>): TaskTemplateOut => r.body)
    );
  }

  /** Path part for operation `listTemplatesSimpleTasksTemplatesSimpleGet()` */
  static readonly ListTemplatesSimpleTasksTemplatesSimpleGetPath = '/tasks/templates/simple';

  /**
   * List Templates Simple.
   *
   * Legacy endpoint: List templates without pagination
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listTemplatesSimpleTasksTemplatesSimpleGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  listTemplatesSimpleTasksTemplatesSimpleGet$Response(params?: ListTemplatesSimpleTasksTemplatesSimpleGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TaskTemplateOut>>> {
    return listTemplatesSimpleTasksTemplatesSimpleGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List Templates Simple.
   *
   * Legacy endpoint: List templates without pagination
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listTemplatesSimpleTasksTemplatesSimpleGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listTemplatesSimpleTasksTemplatesSimpleGet(params?: ListTemplatesSimpleTasksTemplatesSimpleGet$Params, context?: HttpContext): Observable<Array<TaskTemplateOut>> {
    return this.listTemplatesSimpleTasksTemplatesSimpleGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TaskTemplateOut>>): Array<TaskTemplateOut> => r.body)
    );
  }

  /** Path part for operation `deleteTemplateTasksTemplatesTemplateIdDelete()` */
  static readonly DeleteTemplateTasksTemplatesTemplateIdDeletePath = '/tasks/templates/{template_id}';

  /**
   * Delete Template.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTemplateTasksTemplatesTemplateIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTemplateTasksTemplatesTemplateIdDelete$Response(params: DeleteTemplateTasksTemplatesTemplateIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteTemplateTasksTemplatesTemplateIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete Template.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTemplateTasksTemplatesTemplateIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTemplateTasksTemplatesTemplateIdDelete(params: DeleteTemplateTasksTemplatesTemplateIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.deleteTemplateTasksTemplatesTemplateIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `updateTemplateTasksTemplatesTemplateIdPatch()` */
  static readonly UpdateTemplateTasksTemplatesTemplateIdPatchPath = '/tasks/templates/{template_id}';

  /**
   * Update Template.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTemplateTasksTemplatesTemplateIdPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTemplateTasksTemplatesTemplateIdPatch$Response(params: UpdateTemplateTasksTemplatesTemplateIdPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskTemplateOut>> {
    return updateTemplateTasksTemplatesTemplateIdPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Template.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTemplateTasksTemplatesTemplateIdPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTemplateTasksTemplatesTemplateIdPatch(params: UpdateTemplateTasksTemplatesTemplateIdPatch$Params, context?: HttpContext): Observable<TaskTemplateOut> {
    return this.updateTemplateTasksTemplatesTemplateIdPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskTemplateOut>): TaskTemplateOut => r.body)
    );
  }

  /** Path part for operation `listApplicationsTasksApplicationsGet()` */
  static readonly ListApplicationsTasksApplicationsGetPath = '/tasks/applications';

  /**
   * List Applications.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listApplicationsTasksApplicationsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  listApplicationsTasksApplicationsGet$Response(params?: ListApplicationsTasksApplicationsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<PaginatedResponseTaskApplicationOut>> {
    return listApplicationsTasksApplicationsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List Applications.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listApplicationsTasksApplicationsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listApplicationsTasksApplicationsGet(params?: ListApplicationsTasksApplicationsGet$Params, context?: HttpContext): Observable<PaginatedResponseTaskApplicationOut> {
    return this.listApplicationsTasksApplicationsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaginatedResponseTaskApplicationOut>): PaginatedResponseTaskApplicationOut => r.body)
    );
  }

  /** Path part for operation `applyTaskTasksApplicationsPost()` */
  static readonly ApplyTaskTasksApplicationsPostPath = '/tasks/applications';

  /**
   * Apply Task.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `applyTaskTasksApplicationsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  applyTaskTasksApplicationsPost$Response(params: ApplyTaskTasksApplicationsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskApplicationOut>> {
    return applyTaskTasksApplicationsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Apply Task.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `applyTaskTasksApplicationsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  applyTaskTasksApplicationsPost(params: ApplyTaskTasksApplicationsPost$Params, context?: HttpContext): Observable<TaskApplicationOut> {
    return this.applyTaskTasksApplicationsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskApplicationOut>): TaskApplicationOut => r.body)
    );
  }

  /** Path part for operation `listApplicationsSimpleTasksApplicationsSimpleGet()` */
  static readonly ListApplicationsSimpleTasksApplicationsSimpleGetPath = '/tasks/applications/simple';

  /**
   * List Applications Simple.
   *
   * Legacy endpoint: List applications without pagination
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listApplicationsSimpleTasksApplicationsSimpleGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  listApplicationsSimpleTasksApplicationsSimpleGet$Response(params?: ListApplicationsSimpleTasksApplicationsSimpleGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TaskApplicationOut>>> {
    return listApplicationsSimpleTasksApplicationsSimpleGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List Applications Simple.
   *
   * Legacy endpoint: List applications without pagination
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listApplicationsSimpleTasksApplicationsSimpleGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listApplicationsSimpleTasksApplicationsSimpleGet(params?: ListApplicationsSimpleTasksApplicationsSimpleGet$Params, context?: HttpContext): Observable<Array<TaskApplicationOut>> {
    return this.listApplicationsSimpleTasksApplicationsSimpleGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TaskApplicationOut>>): Array<TaskApplicationOut> => r.body)
    );
  }

  /** Path part for operation `deleteApplicationTasksApplicationsApplicationIdDelete()` */
  static readonly DeleteApplicationTasksApplicationsApplicationIdDeletePath = '/tasks/applications/{application_id}';

  /**
   * Delete Application.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteApplicationTasksApplicationsApplicationIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteApplicationTasksApplicationsApplicationIdDelete$Response(params: DeleteApplicationTasksApplicationsApplicationIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteApplicationTasksApplicationsApplicationIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete Application.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteApplicationTasksApplicationsApplicationIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteApplicationTasksApplicationsApplicationIdDelete(params: DeleteApplicationTasksApplicationsApplicationIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.deleteApplicationTasksApplicationsApplicationIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `updateApplicationTasksApplicationsApplicationIdPatch()` */
  static readonly UpdateApplicationTasksApplicationsApplicationIdPatchPath = '/tasks/applications/{application_id}';

  /**
   * Update Application.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateApplicationTasksApplicationsApplicationIdPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateApplicationTasksApplicationsApplicationIdPatch$Response(params: UpdateApplicationTasksApplicationsApplicationIdPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskApplicationOut>> {
    return updateApplicationTasksApplicationsApplicationIdPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Application.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateApplicationTasksApplicationsApplicationIdPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateApplicationTasksApplicationsApplicationIdPatch(params: UpdateApplicationTasksApplicationsApplicationIdPatch$Params, context?: HttpContext): Observable<TaskApplicationOut> {
    return this.updateApplicationTasksApplicationsApplicationIdPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskApplicationOut>): TaskApplicationOut => r.body)
    );
  }

  /** Path part for operation `getTaskApplicationsByResidentTasksResidentsResidentIdTaskApplicationsGet()` */
  static readonly GetTaskApplicationsByResidentTasksResidentsResidentIdTaskApplicationsGetPath = '/tasks/residents/{resident_id}/task-applications';

  /**
   * Get Task Applications By Resident.
   *
   * Get task applications for a specific resident with time filters and category information.
   *
   * Time filters:
   * - 7d: Last 7 days
   * - 15d: Last 15 days  
   * - 30d: Last 30 days
   * - 1y: Last year
   * - all: All applications
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTaskApplicationsByResidentTasksResidentsResidentIdTaskApplicationsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskApplicationsByResidentTasksResidentsResidentIdTaskApplicationsGet$Response(params: GetTaskApplicationsByResidentTasksResidentsResidentIdTaskApplicationsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<PaginatedResponseTaskApplicationOut>> {
    return getTaskApplicationsByResidentTasksResidentsResidentIdTaskApplicationsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Task Applications By Resident.
   *
   * Get task applications for a specific resident with time filters and category information.
   *
   * Time filters:
   * - 7d: Last 7 days
   * - 15d: Last 15 days  
   * - 30d: Last 30 days
   * - 1y: Last year
   * - all: All applications
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTaskApplicationsByResidentTasksResidentsResidentIdTaskApplicationsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskApplicationsByResidentTasksResidentsResidentIdTaskApplicationsGet(params: GetTaskApplicationsByResidentTasksResidentsResidentIdTaskApplicationsGet$Params, context?: HttpContext): Observable<PaginatedResponseTaskApplicationOut> {
    return this.getTaskApplicationsByResidentTasksResidentsResidentIdTaskApplicationsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaginatedResponseTaskApplicationOut>): PaginatedResponseTaskApplicationOut => r.body)
    );
  }

  /** Path part for operation `createTaskApplicationsBatchTasksApplicationsBatchPost()` */
  static readonly CreateTaskApplicationsBatchTasksApplicationsBatchPostPath = '/tasks/applications/batch';

  /**
   * Create Task Applications Batch.
   *
   * Crea aplicaciones de tareas en lote para múltiples residentes.
   *
   * Crea una aplicación de tarea por cada combinación de resident_id × task_template_id.
   * Ejemplo: 3 residentes × 3 tareas = 9 registros creados.
   *
   * Args:
   *     payload: Solicitud con resident_ids, task_template_ids y residence_id
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTaskApplicationsBatchTasksApplicationsBatchPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTaskApplicationsBatchTasksApplicationsBatchPost$Response(params: CreateTaskApplicationsBatchTasksApplicationsBatchPost$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskApplicationBatchResponse>> {
    return createTaskApplicationsBatchTasksApplicationsBatchPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Task Applications Batch.
   *
   * Crea aplicaciones de tareas en lote para múltiples residentes.
   *
   * Crea una aplicación de tarea por cada combinación de resident_id × task_template_id.
   * Ejemplo: 3 residentes × 3 tareas = 9 registros creados.
   *
   * Args:
   *     payload: Solicitud con resident_ids, task_template_ids y residence_id
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTaskApplicationsBatchTasksApplicationsBatchPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTaskApplicationsBatchTasksApplicationsBatchPost(params: CreateTaskApplicationsBatchTasksApplicationsBatchPost$Params, context?: HttpContext): Observable<TaskApplicationBatchResponse> {
    return this.createTaskApplicationsBatchTasksApplicationsBatchPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskApplicationBatchResponse>): TaskApplicationBatchResponse => r.body)
    );
  }

  /** Path part for operation `getTaskApplicationsDailySummaryTasksApplicationsDailySummaryGet()` */
  static readonly GetTaskApplicationsDailySummaryTasksApplicationsDailySummaryGetPath = '/tasks/applications/daily-summary';

  /**
   * Get Task Applications Daily Summary.
   *
   * Obtiene resumen diario de aplicaciones de tareas por residente.
   *
   * Agrupa las aplicaciones por residente y fecha, mostrando estadísticas
   * de cuántas tareas se aplicaron cada día.
   *
   * Si no se proporcionan date_from y date_to, retorna TODO el historial.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTaskApplicationsDailySummaryTasksApplicationsDailySummaryGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskApplicationsDailySummaryTasksApplicationsDailySummaryGet$Response(params: GetTaskApplicationsDailySummaryTasksApplicationsDailySummaryGet$Params, context?: HttpContext): Observable<StrictHttpResponse<PaginatedResponseTaskApplicationDailySummary>> {
    return getTaskApplicationsDailySummaryTasksApplicationsDailySummaryGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Task Applications Daily Summary.
   *
   * Obtiene resumen diario de aplicaciones de tareas por residente.
   *
   * Agrupa las aplicaciones por residente y fecha, mostrando estadísticas
   * de cuántas tareas se aplicaron cada día.
   *
   * Si no se proporcionan date_from y date_to, retorna TODO el historial.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTaskApplicationsDailySummaryTasksApplicationsDailySummaryGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskApplicationsDailySummaryTasksApplicationsDailySummaryGet(params: GetTaskApplicationsDailySummaryTasksApplicationsDailySummaryGet$Params, context?: HttpContext): Observable<PaginatedResponseTaskApplicationDailySummary> {
    return this.getTaskApplicationsDailySummaryTasksApplicationsDailySummaryGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaginatedResponseTaskApplicationDailySummary>): PaginatedResponseTaskApplicationDailySummary => r.body)
    );
  }

  /** Path part for operation `getTaskApplicationsByResidentDateTasksApplicationsResidentResidentIdDateDateGet()` */
  static readonly GetTaskApplicationsByResidentDateTasksApplicationsResidentResidentIdDateDateGetPath = '/tasks/applications/resident/{resident_id}/date/{date}';

  /**
   * Get Task Applications By Resident Date.
   *
   * Obtiene todas las aplicaciones de tareas de un residente en una fecha específica.
   *
   * Muestra el detalle completo de todas las tareas asignadas al residente
   * en el día especificado, ordenadas por hora de asignación.
   *
   * Si assigned_by_id está presente, solo retorna las tareas creadas/asignadas
   * por ese profesional o gestor específico.
   *
   * Si assigned_by_id es None, retorna todas las tareas de ese día.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTaskApplicationsByResidentDateTasksApplicationsResidentResidentIdDateDateGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskApplicationsByResidentDateTasksApplicationsResidentResidentIdDateDateGet$Response(params: GetTaskApplicationsByResidentDateTasksApplicationsResidentResidentIdDateDateGet$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskApplicationResidentDay>> {
    return getTaskApplicationsByResidentDateTasksApplicationsResidentResidentIdDateDateGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Task Applications By Resident Date.
   *
   * Obtiene todas las aplicaciones de tareas de un residente en una fecha específica.
   *
   * Muestra el detalle completo de todas las tareas asignadas al residente
   * en el día especificado, ordenadas por hora de asignación.
   *
   * Si assigned_by_id está presente, solo retorna las tareas creadas/asignadas
   * por ese profesional o gestor específico.
   *
   * Si assigned_by_id es None, retorna todas las tareas de ese día.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTaskApplicationsByResidentDateTasksApplicationsResidentResidentIdDateDateGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskApplicationsByResidentDateTasksApplicationsResidentResidentIdDateDateGet(params: GetTaskApplicationsByResidentDateTasksApplicationsResidentResidentIdDateDateGet$Params, context?: HttpContext): Observable<TaskApplicationResidentDay> {
    return this.getTaskApplicationsByResidentDateTasksApplicationsResidentResidentIdDateDateGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskApplicationResidentDay>): TaskApplicationResidentDay => r.body)
    );
  }

  /** Path part for operation `getUserAssignersTasksUsersAssignersGet()` */
  static readonly GetUserAssignersTasksUsersAssignersGetPath = '/tasks/users/assigners';

  /**
   * Get User Assigners.
   *
   * Obtiene lista de usuarios que pueden asignar tareas en la residencia.
   *
   * Retorna profesionales y gestores que tienen permisos para asignar tareas.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserAssignersTasksUsersAssignersGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserAssignersTasksUsersAssignersGet$Response(params: GetUserAssignersTasksUsersAssignersGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserAssigner>>> {
    return getUserAssignersTasksUsersAssignersGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get User Assigners.
   *
   * Obtiene lista de usuarios que pueden asignar tareas en la residencia.
   *
   * Retorna profesionales y gestores que tienen permisos para asignar tareas.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserAssignersTasksUsersAssignersGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserAssignersTasksUsersAssignersGet(params: GetUserAssignersTasksUsersAssignersGet$Params, context?: HttpContext): Observable<Array<UserAssigner>> {
    return this.getUserAssignersTasksUsersAssignersGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserAssigner>>): Array<UserAssigner> => r.body)
    );
  }

  /** Path part for operation `parseVoiceTranscriptTasksApplicationsParseVoicePost()` */
  static readonly ParseVoiceTranscriptTasksApplicationsParseVoicePostPath = '/tasks/applications/parse-voice';

  /**
   * Parse Voice Transcript.
   *
   * Parsea un transcript de voz usando Dialogflow y encuentra residente/tarea con fuzzy matching
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `parseVoiceTranscriptTasksApplicationsParseVoicePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  parseVoiceTranscriptTasksApplicationsParseVoicePost$Response(params: ParseVoiceTranscriptTasksApplicationsParseVoicePost$Params, context?: HttpContext): Observable<StrictHttpResponse<VoiceParseResponse>> {
    return parseVoiceTranscriptTasksApplicationsParseVoicePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Parse Voice Transcript.
   *
   * Parsea un transcript de voz usando Dialogflow y encuentra residente/tarea con fuzzy matching
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `parseVoiceTranscriptTasksApplicationsParseVoicePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  parseVoiceTranscriptTasksApplicationsParseVoicePost(params: ParseVoiceTranscriptTasksApplicationsParseVoicePost$Params, context?: HttpContext): Observable<VoiceParseResponse> {
    return this.parseVoiceTranscriptTasksApplicationsParseVoicePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<VoiceParseResponse>): VoiceParseResponse => r.body)
    );
  }

  /** Path part for operation `createVoiceApplicationTasksApplicationsVoicePost()` */
  static readonly CreateVoiceApplicationTasksApplicationsVoicePostPath = '/tasks/applications/voice';

  /**
   * Create Voice Application.
   *
   * Crea una aplicación de tarea basada en los datos parseados por voz
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createVoiceApplicationTasksApplicationsVoicePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createVoiceApplicationTasksApplicationsVoicePost$Response(params: CreateVoiceApplicationTasksApplicationsVoicePost$Params, context?: HttpContext): Observable<StrictHttpResponse<VoiceApplicationResponse>> {
    return createVoiceApplicationTasksApplicationsVoicePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Voice Application.
   *
   * Crea una aplicación de tarea basada en los datos parseados por voz
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createVoiceApplicationTasksApplicationsVoicePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createVoiceApplicationTasksApplicationsVoicePost(params: CreateVoiceApplicationTasksApplicationsVoicePost$Params, context?: HttpContext): Observable<VoiceApplicationResponse> {
    return this.createVoiceApplicationTasksApplicationsVoicePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<VoiceApplicationResponse>): VoiceApplicationResponse => r.body)
    );
  }

}
