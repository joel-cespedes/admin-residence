/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { applyTaskTasksApplicationsPost } from '../fn/tasks/apply-task-tasks-applications-post';
import { ApplyTaskTasksApplicationsPost$Params } from '../fn/tasks/apply-task-tasks-applications-post';
import { createCategoryTasksCategoriesPost } from '../fn/tasks/create-category-tasks-categories-post';
import { CreateCategoryTasksCategoriesPost$Params } from '../fn/tasks/create-category-tasks-categories-post';
import { createTemplateTasksTemplatesPost } from '../fn/tasks/create-template-tasks-templates-post';
import { CreateTemplateTasksTemplatesPost$Params } from '../fn/tasks/create-template-tasks-templates-post';
import { deleteApplicationTasksApplicationsApplicationIdDelete } from '../fn/tasks/delete-application-tasks-applications-application-id-delete';
import { DeleteApplicationTasksApplicationsApplicationIdDelete$Params } from '../fn/tasks/delete-application-tasks-applications-application-id-delete';
import { deleteCategoryTasksCategoriesCategoryIdDelete } from '../fn/tasks/delete-category-tasks-categories-category-id-delete';
import { DeleteCategoryTasksCategoriesCategoryIdDelete$Params } from '../fn/tasks/delete-category-tasks-categories-category-id-delete';
import { deleteTemplateTasksTemplatesTemplateIdDelete } from '../fn/tasks/delete-template-tasks-templates-template-id-delete';
import { DeleteTemplateTasksTemplatesTemplateIdDelete$Params } from '../fn/tasks/delete-template-tasks-templates-template-id-delete';
import { listApplicationsTasksApplicationsGet } from '../fn/tasks/list-applications-tasks-applications-get';
import { ListApplicationsTasksApplicationsGet$Params } from '../fn/tasks/list-applications-tasks-applications-get';
import { listCategoriesTasksCategoriesGet } from '../fn/tasks/list-categories-tasks-categories-get';
import { ListCategoriesTasksCategoriesGet$Params } from '../fn/tasks/list-categories-tasks-categories-get';
import { listTemplatesTasksTemplatesGet } from '../fn/tasks/list-templates-tasks-templates-get';
import { ListTemplatesTasksTemplatesGet$Params } from '../fn/tasks/list-templates-tasks-templates-get';
import { TaskApplicationOut } from '../models/task-application-out';
import { TaskCategoryOut } from '../models/task-category-out';
import { TaskTemplateOut } from '../models/task-template-out';
import { updateApplicationTasksApplicationsApplicationIdPatch } from '../fn/tasks/update-application-tasks-applications-application-id-patch';
import { UpdateApplicationTasksApplicationsApplicationIdPatch$Params } from '../fn/tasks/update-application-tasks-applications-application-id-patch';
import { updateCategoryTasksCategoriesCategoryIdPatch } from '../fn/tasks/update-category-tasks-categories-category-id-patch';
import { UpdateCategoryTasksCategoriesCategoryIdPatch$Params } from '../fn/tasks/update-category-tasks-categories-category-id-patch';
import { updateTemplateTasksTemplatesTemplateIdPatch } from '../fn/tasks/update-template-tasks-templates-template-id-patch';
import { UpdateTemplateTasksTemplatesTemplateIdPatch$Params } from '../fn/tasks/update-template-tasks-templates-template-id-patch';

@Injectable({ providedIn: 'root' })
export class TasksService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `listCategoriesTasksCategoriesGet()` */
  static readonly ListCategoriesTasksCategoriesGetPath = '/tasks/categories';

  /**
   * List Categories.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listCategoriesTasksCategoriesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  listCategoriesTasksCategoriesGet$Response(
    params?: ListCategoriesTasksCategoriesGet$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<Array<TaskCategoryOut>>> {
    return listCategoriesTasksCategoriesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List Categories.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listCategoriesTasksCategoriesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listCategoriesTasksCategoriesGet(
    params?: ListCategoriesTasksCategoriesGet$Params,
    context?: HttpContext
  ): Observable<Array<TaskCategoryOut>> {
    return this.listCategoriesTasksCategoriesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TaskCategoryOut>>): Array<TaskCategoryOut> => r.body)
    );
  }

  /** Path part for operation `createCategoryTasksCategoriesPost()` */
  static readonly CreateCategoryTasksCategoriesPostPath = '/tasks/categories';

  /**
   * Create Category.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createCategoryTasksCategoriesPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createCategoryTasksCategoriesPost$Response(
    params: CreateCategoryTasksCategoriesPost$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<TaskCategoryOut>> {
    return createCategoryTasksCategoriesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Category.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createCategoryTasksCategoriesPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createCategoryTasksCategoriesPost(
    params: CreateCategoryTasksCategoriesPost$Params,
    context?: HttpContext
  ): Observable<TaskCategoryOut> {
    return this.createCategoryTasksCategoriesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskCategoryOut>): TaskCategoryOut => r.body)
    );
  }

  /** Path part for operation `deleteCategoryTasksCategoriesCategoryIdDelete()` */
  static readonly DeleteCategoryTasksCategoriesCategoryIdDeletePath =
    '/tasks/categories/{category_id}';

  /**
   * Delete Category.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCategoryTasksCategoriesCategoryIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCategoryTasksCategoriesCategoryIdDelete$Response(
    params: DeleteCategoryTasksCategoriesCategoryIdDelete$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<void>> {
    return deleteCategoryTasksCategoriesCategoryIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete Category.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCategoryTasksCategoriesCategoryIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCategoryTasksCategoriesCategoryIdDelete(
    params: DeleteCategoryTasksCategoriesCategoryIdDelete$Params,
    context?: HttpContext
  ): Observable<void> {
    return this.deleteCategoryTasksCategoriesCategoryIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `updateCategoryTasksCategoriesCategoryIdPatch()` */
  static readonly UpdateCategoryTasksCategoriesCategoryIdPatchPath =
    '/tasks/categories/{category_id}';

  /**
   * Update Category.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCategoryTasksCategoriesCategoryIdPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCategoryTasksCategoriesCategoryIdPatch$Response(
    params: UpdateCategoryTasksCategoriesCategoryIdPatch$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<TaskCategoryOut>> {
    return updateCategoryTasksCategoriesCategoryIdPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Category.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCategoryTasksCategoriesCategoryIdPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCategoryTasksCategoriesCategoryIdPatch(
    params: UpdateCategoryTasksCategoriesCategoryIdPatch$Params,
    context?: HttpContext
  ): Observable<TaskCategoryOut> {
    return this.updateCategoryTasksCategoriesCategoryIdPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskCategoryOut>): TaskCategoryOut => r.body)
    );
  }

  /** Path part for operation `listTemplatesTasksTemplatesGet()` */
  static readonly ListTemplatesTasksTemplatesGetPath = '/tasks/templates';

  /**
   * List Templates.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listTemplatesTasksTemplatesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  listTemplatesTasksTemplatesGet$Response(
    params?: ListTemplatesTasksTemplatesGet$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<Array<TaskTemplateOut>>> {
    return listTemplatesTasksTemplatesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List Templates.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listTemplatesTasksTemplatesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listTemplatesTasksTemplatesGet(
    params?: ListTemplatesTasksTemplatesGet$Params,
    context?: HttpContext
  ): Observable<Array<TaskTemplateOut>> {
    return this.listTemplatesTasksTemplatesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TaskTemplateOut>>): Array<TaskTemplateOut> => r.body)
    );
  }

  /** Path part for operation `createTemplateTasksTemplatesPost()` */
  static readonly CreateTemplateTasksTemplatesPostPath = '/tasks/templates';

  /**
   * Create Template.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTemplateTasksTemplatesPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTemplateTasksTemplatesPost$Response(
    params: CreateTemplateTasksTemplatesPost$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<TaskTemplateOut>> {
    return createTemplateTasksTemplatesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Template.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTemplateTasksTemplatesPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTemplateTasksTemplatesPost(
    params: CreateTemplateTasksTemplatesPost$Params,
    context?: HttpContext
  ): Observable<TaskTemplateOut> {
    return this.createTemplateTasksTemplatesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskTemplateOut>): TaskTemplateOut => r.body)
    );
  }

  /** Path part for operation `deleteTemplateTasksTemplatesTemplateIdDelete()` */
  static readonly DeleteTemplateTasksTemplatesTemplateIdDeletePath =
    '/tasks/templates/{template_id}';

  /**
   * Delete Template.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTemplateTasksTemplatesTemplateIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTemplateTasksTemplatesTemplateIdDelete$Response(
    params: DeleteTemplateTasksTemplatesTemplateIdDelete$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<void>> {
    return deleteTemplateTasksTemplatesTemplateIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete Template.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTemplateTasksTemplatesTemplateIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTemplateTasksTemplatesTemplateIdDelete(
    params: DeleteTemplateTasksTemplatesTemplateIdDelete$Params,
    context?: HttpContext
  ): Observable<void> {
    return this.deleteTemplateTasksTemplatesTemplateIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `updateTemplateTasksTemplatesTemplateIdPatch()` */
  static readonly UpdateTemplateTasksTemplatesTemplateIdPatchPath =
    '/tasks/templates/{template_id}';

  /**
   * Update Template.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTemplateTasksTemplatesTemplateIdPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTemplateTasksTemplatesTemplateIdPatch$Response(
    params: UpdateTemplateTasksTemplatesTemplateIdPatch$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<TaskTemplateOut>> {
    return updateTemplateTasksTemplatesTemplateIdPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Template.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTemplateTasksTemplatesTemplateIdPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTemplateTasksTemplatesTemplateIdPatch(
    params: UpdateTemplateTasksTemplatesTemplateIdPatch$Params,
    context?: HttpContext
  ): Observable<TaskTemplateOut> {
    return this.updateTemplateTasksTemplatesTemplateIdPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskTemplateOut>): TaskTemplateOut => r.body)
    );
  }

  /** Path part for operation `listApplicationsTasksApplicationsGet()` */
  static readonly ListApplicationsTasksApplicationsGetPath = '/tasks/applications';

  /**
   * List Applications.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listApplicationsTasksApplicationsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  listApplicationsTasksApplicationsGet$Response(
    params?: ListApplicationsTasksApplicationsGet$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<Array<TaskApplicationOut>>> {
    return listApplicationsTasksApplicationsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List Applications.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listApplicationsTasksApplicationsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listApplicationsTasksApplicationsGet(
    params?: ListApplicationsTasksApplicationsGet$Params,
    context?: HttpContext
  ): Observable<Array<TaskApplicationOut>> {
    return this.listApplicationsTasksApplicationsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TaskApplicationOut>>): Array<TaskApplicationOut> => r.body)
    );
  }

  /** Path part for operation `applyTaskTasksApplicationsPost()` */
  static readonly ApplyTaskTasksApplicationsPostPath = '/tasks/applications';

  /**
   * Apply Task.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `applyTaskTasksApplicationsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  applyTaskTasksApplicationsPost$Response(
    params: ApplyTaskTasksApplicationsPost$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<TaskApplicationOut>> {
    return applyTaskTasksApplicationsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Apply Task.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `applyTaskTasksApplicationsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  applyTaskTasksApplicationsPost(
    params: ApplyTaskTasksApplicationsPost$Params,
    context?: HttpContext
  ): Observable<TaskApplicationOut> {
    return this.applyTaskTasksApplicationsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskApplicationOut>): TaskApplicationOut => r.body)
    );
  }

  /** Path part for operation `deleteApplicationTasksApplicationsApplicationIdDelete()` */
  static readonly DeleteApplicationTasksApplicationsApplicationIdDeletePath =
    '/tasks/applications/{application_id}';

  /**
   * Delete Application.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteApplicationTasksApplicationsApplicationIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteApplicationTasksApplicationsApplicationIdDelete$Response(
    params: DeleteApplicationTasksApplicationsApplicationIdDelete$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<void>> {
    return deleteApplicationTasksApplicationsApplicationIdDelete(
      this.http,
      this.rootUrl,
      params,
      context
    );
  }

  /**
   * Delete Application.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteApplicationTasksApplicationsApplicationIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteApplicationTasksApplicationsApplicationIdDelete(
    params: DeleteApplicationTasksApplicationsApplicationIdDelete$Params,
    context?: HttpContext
  ): Observable<void> {
    return this.deleteApplicationTasksApplicationsApplicationIdDelete$Response(
      params,
      context
    ).pipe(map((r: StrictHttpResponse<void>): void => r.body));
  }

  /** Path part for operation `updateApplicationTasksApplicationsApplicationIdPatch()` */
  static readonly UpdateApplicationTasksApplicationsApplicationIdPatchPath =
    '/tasks/applications/{application_id}';

  /**
   * Update Application.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateApplicationTasksApplicationsApplicationIdPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateApplicationTasksApplicationsApplicationIdPatch$Response(
    params: UpdateApplicationTasksApplicationsApplicationIdPatch$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<TaskApplicationOut>> {
    return updateApplicationTasksApplicationsApplicationIdPatch(
      this.http,
      this.rootUrl,
      params,
      context
    );
  }

  /**
   * Update Application.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateApplicationTasksApplicationsApplicationIdPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateApplicationTasksApplicationsApplicationIdPatch(
    params: UpdateApplicationTasksApplicationsApplicationIdPatch$Params,
    context?: HttpContext
  ): Observable<TaskApplicationOut> {
    return this.updateApplicationTasksApplicationsApplicationIdPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskApplicationOut>): TaskApplicationOut => r.body)
    );
  }
}
