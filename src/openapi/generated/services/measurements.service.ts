/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { confirmVoiceMeasurementMeasurementsVoiceConfirmPost } from '../fn/measurements/confirm-voice-measurement-measurements-voice-confirm-post';
import { ConfirmVoiceMeasurementMeasurementsVoiceConfirmPost$Params } from '../fn/measurements/confirm-voice-measurement-measurements-voice-confirm-post';
import { createMeasurementMeasurementsPost } from '../fn/measurements/create-measurement-measurements-post';
import { CreateMeasurementMeasurementsPost$Params } from '../fn/measurements/create-measurement-measurements-post';
import { deleteMeasurementMeasurementsMeasurementIdDelete } from '../fn/measurements/delete-measurement-measurements-measurement-id-delete';
import { DeleteMeasurementMeasurementsMeasurementIdDelete$Params } from '../fn/measurements/delete-measurement-measurements-measurement-id-delete';
import { getDailySummaryMeasurementsDailySummaryGet } from '../fn/measurements/get-daily-summary-measurements-daily-summary-get';
import { GetDailySummaryMeasurementsDailySummaryGet$Params } from '../fn/measurements/get-daily-summary-measurements-daily-summary-get';
import { getMeasurementHistoryMeasurementsMeasurementIdHistoryGet } from '../fn/measurements/get-measurement-history-measurements-measurement-id-history-get';
import { GetMeasurementHistoryMeasurementsMeasurementIdHistoryGet$Params } from '../fn/measurements/get-measurement-history-measurements-measurement-id-history-get';
import { getMeasurementMeasurementsMeasurementIdGet } from '../fn/measurements/get-measurement-measurements-measurement-id-get';
import { GetMeasurementMeasurementsMeasurementIdGet$Params } from '../fn/measurements/get-measurement-measurements-measurement-id-get';
import { getMeasurementsByDayMeasurementsByDayGet } from '../fn/measurements/get-measurements-by-day-measurements-by-day-get';
import { GetMeasurementsByDayMeasurementsByDayGet$Params } from '../fn/measurements/get-measurements-by-day-measurements-by-day-get';
import { getMeasurementsByResidentMeasurementsResidentsResidentIdMeasurementsGet } from '../fn/measurements/get-measurements-by-resident-measurements-residents-resident-id-measurements-get';
import { GetMeasurementsByResidentMeasurementsResidentsResidentIdMeasurementsGet$Params } from '../fn/measurements/get-measurements-by-resident-measurements-residents-resident-id-measurements-get';
import { listMeasurementsMeasurementsGet } from '../fn/measurements/list-measurements-measurements-get';
import { ListMeasurementsMeasurementsGet$Params } from '../fn/measurements/list-measurements-measurements-get';
import { listMeasurementsSimpleMeasurementsSimpleGet } from '../fn/measurements/list-measurements-simple-measurements-simple-get';
import { ListMeasurementsSimpleMeasurementsSimpleGet$Params } from '../fn/measurements/list-measurements-simple-measurements-simple-get';
import { MeasurementOut } from '../models/measurement-out';
import { PaginatedResponseMeasurementDailySummary } from '../models/paginated-response-measurement-daily-summary';
import { PaginatedResponseMeasurementOut } from '../models/paginated-response-measurement-out';
import { patchMeasurementMeasurementsMeasurementIdPatch } from '../fn/measurements/patch-measurement-measurements-measurement-id-patch';
import { PatchMeasurementMeasurementsMeasurementIdPatch$Params } from '../fn/measurements/patch-measurement-measurements-measurement-id-patch';
import { processVoiceMeasurementMeasurementsVoicePost } from '../fn/measurements/process-voice-measurement-measurements-voice-post';
import { ProcessVoiceMeasurementMeasurementsVoicePost$Params } from '../fn/measurements/process-voice-measurement-measurements-voice-post';
import { updateMeasurementMeasurementsMeasurementIdPut } from '../fn/measurements/update-measurement-measurements-measurement-id-put';
import { UpdateMeasurementMeasurementsMeasurementIdPut$Params } from '../fn/measurements/update-measurement-measurements-measurement-id-put';
import { VoiceMeasurementResponse } from '../models/voice-measurement-response';

@Injectable({ providedIn: 'root' })
export class MeasurementsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createMeasurementMeasurementsPost()` */
  static readonly CreateMeasurementMeasurementsPostPath = '/measurements';

  /**
   * Create Measurement.
   *
   * Crea una medición. Si el header residence_id no llega, se intenta inferir
   * a partir de resident_id o device_id. Valida pertenencia y coherencia de datos.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createMeasurementMeasurementsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMeasurementMeasurementsPost$Response(params: CreateMeasurementMeasurementsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<MeasurementOut>> {
    return createMeasurementMeasurementsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Measurement.
   *
   * Crea una medición. Si el header residence_id no llega, se intenta inferir
   * a partir de resident_id o device_id. Valida pertenencia y coherencia de datos.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createMeasurementMeasurementsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMeasurementMeasurementsPost(params: CreateMeasurementMeasurementsPost$Params, context?: HttpContext): Observable<MeasurementOut> {
    return this.createMeasurementMeasurementsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<MeasurementOut>): MeasurementOut => r.body)
    );
  }

  /** Path part for operation `listMeasurementsMeasurementsGet()` */
  static readonly ListMeasurementsMeasurementsGetPath = '/measurements/';

  /**
   * List Measurements.
   *
   * List measurements with pagination and filters
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listMeasurementsMeasurementsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  listMeasurementsMeasurementsGet$Response(params?: ListMeasurementsMeasurementsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<PaginatedResponseMeasurementOut>> {
    return listMeasurementsMeasurementsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List Measurements.
   *
   * List measurements with pagination and filters
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listMeasurementsMeasurementsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listMeasurementsMeasurementsGet(params?: ListMeasurementsMeasurementsGet$Params, context?: HttpContext): Observable<PaginatedResponseMeasurementOut> {
    return this.listMeasurementsMeasurementsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaginatedResponseMeasurementOut>): PaginatedResponseMeasurementOut => r.body)
    );
  }

  /** Path part for operation `listMeasurementsSimpleMeasurementsSimpleGet()` */
  static readonly ListMeasurementsSimpleMeasurementsSimpleGetPath = '/measurements/simple';

  /**
   * List Measurements Simple.
   *
   * Legacy endpoint: List measurements without pagination
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listMeasurementsSimpleMeasurementsSimpleGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  listMeasurementsSimpleMeasurementsSimpleGet$Response(params?: ListMeasurementsSimpleMeasurementsSimpleGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MeasurementOut>>> {
    return listMeasurementsSimpleMeasurementsSimpleGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List Measurements Simple.
   *
   * Legacy endpoint: List measurements without pagination
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listMeasurementsSimpleMeasurementsSimpleGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listMeasurementsSimpleMeasurementsSimpleGet(params?: ListMeasurementsSimpleMeasurementsSimpleGet$Params, context?: HttpContext): Observable<Array<MeasurementOut>> {
    return this.listMeasurementsSimpleMeasurementsSimpleGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MeasurementOut>>): Array<MeasurementOut> => r.body)
    );
  }

  /** Path part for operation `getDailySummaryMeasurementsDailySummaryGet()` */
  static readonly GetDailySummaryMeasurementsDailySummaryGetPath = '/measurements/daily-summary';

  /**
   * Get Daily Summary.
   *
   * Obtiene un resumen diario de mediciones agrupadas por residente y fecha.
   *
   * Retorna un registro por cada residente/día que tenga mediciones, con información
   * agregada como cantidad de mediciones, tipos realizados y horarios.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDailySummaryMeasurementsDailySummaryGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDailySummaryMeasurementsDailySummaryGet$Response(params?: GetDailySummaryMeasurementsDailySummaryGet$Params, context?: HttpContext): Observable<StrictHttpResponse<PaginatedResponseMeasurementDailySummary>> {
    return getDailySummaryMeasurementsDailySummaryGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Daily Summary.
   *
   * Obtiene un resumen diario de mediciones agrupadas por residente y fecha.
   *
   * Retorna un registro por cada residente/día que tenga mediciones, con información
   * agregada como cantidad de mediciones, tipos realizados y horarios.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDailySummaryMeasurementsDailySummaryGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDailySummaryMeasurementsDailySummaryGet(params?: GetDailySummaryMeasurementsDailySummaryGet$Params, context?: HttpContext): Observable<PaginatedResponseMeasurementDailySummary> {
    return this.getDailySummaryMeasurementsDailySummaryGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaginatedResponseMeasurementDailySummary>): PaginatedResponseMeasurementDailySummary => r.body)
    );
  }

  /** Path part for operation `getMeasurementsByDayMeasurementsByDayGet()` */
  static readonly GetMeasurementsByDayMeasurementsByDayGetPath = '/measurements/by-day';

  /**
   * Get Measurements By Day.
   *
   * Obtiene todas las mediciones de un residente en una fecha específica.
   *
   * Retorna todas las mediciones del residente para el día especificado,
   * ordenadas cronológicamente por hora de toma.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMeasurementsByDayMeasurementsByDayGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMeasurementsByDayMeasurementsByDayGet$Response(params: GetMeasurementsByDayMeasurementsByDayGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MeasurementOut>>> {
    return getMeasurementsByDayMeasurementsByDayGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Measurements By Day.
   *
   * Obtiene todas las mediciones de un residente en una fecha específica.
   *
   * Retorna todas las mediciones del residente para el día especificado,
   * ordenadas cronológicamente por hora de toma.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMeasurementsByDayMeasurementsByDayGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMeasurementsByDayMeasurementsByDayGet(params: GetMeasurementsByDayMeasurementsByDayGet$Params, context?: HttpContext): Observable<Array<MeasurementOut>> {
    return this.getMeasurementsByDayMeasurementsByDayGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MeasurementOut>>): Array<MeasurementOut> => r.body)
    );
  }

  /** Path part for operation `getMeasurementsByResidentMeasurementsResidentsResidentIdMeasurementsGet()` */
  static readonly GetMeasurementsByResidentMeasurementsResidentsResidentIdMeasurementsGetPath = '/measurements/residents/{resident_id}/measurements';

  /**
   * Get Measurements By Resident.
   *
   * Get measurements for a specific resident with time filters.
   *
   * Time filters:
   * - 7d: Last 7 days
   * - 15d: Last 15 days  
   * - 30d: Last 30 days
   * - 1y: Last year
   * - all: All measurements
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMeasurementsByResidentMeasurementsResidentsResidentIdMeasurementsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMeasurementsByResidentMeasurementsResidentsResidentIdMeasurementsGet$Response(params: GetMeasurementsByResidentMeasurementsResidentsResidentIdMeasurementsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<PaginatedResponseMeasurementOut>> {
    return getMeasurementsByResidentMeasurementsResidentsResidentIdMeasurementsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Measurements By Resident.
   *
   * Get measurements for a specific resident with time filters.
   *
   * Time filters:
   * - 7d: Last 7 days
   * - 15d: Last 15 days  
   * - 30d: Last 30 days
   * - 1y: Last year
   * - all: All measurements
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMeasurementsByResidentMeasurementsResidentsResidentIdMeasurementsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMeasurementsByResidentMeasurementsResidentsResidentIdMeasurementsGet(params: GetMeasurementsByResidentMeasurementsResidentsResidentIdMeasurementsGet$Params, context?: HttpContext): Observable<PaginatedResponseMeasurementOut> {
    return this.getMeasurementsByResidentMeasurementsResidentsResidentIdMeasurementsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaginatedResponseMeasurementOut>): PaginatedResponseMeasurementOut => r.body)
    );
  }

  /** Path part for operation `getMeasurementMeasurementsMeasurementIdGet()` */
  static readonly GetMeasurementMeasurementsMeasurementIdGetPath = '/measurements/{measurement_id}';

  /**
   * Get Measurement.
   *
   * Get a specific measurement
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMeasurementMeasurementsMeasurementIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMeasurementMeasurementsMeasurementIdGet$Response(params: GetMeasurementMeasurementsMeasurementIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<MeasurementOut>> {
    return getMeasurementMeasurementsMeasurementIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Measurement.
   *
   * Get a specific measurement
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMeasurementMeasurementsMeasurementIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMeasurementMeasurementsMeasurementIdGet(params: GetMeasurementMeasurementsMeasurementIdGet$Params, context?: HttpContext): Observable<MeasurementOut> {
    return this.getMeasurementMeasurementsMeasurementIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<MeasurementOut>): MeasurementOut => r.body)
    );
  }

  /** Path part for operation `updateMeasurementMeasurementsMeasurementIdPut()` */
  static readonly UpdateMeasurementMeasurementsMeasurementIdPutPath = '/measurements/{measurement_id}';

  /**
   * Update Measurement.
   *
   * Update a measurement
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateMeasurementMeasurementsMeasurementIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMeasurementMeasurementsMeasurementIdPut$Response(params: UpdateMeasurementMeasurementsMeasurementIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<MeasurementOut>> {
    return updateMeasurementMeasurementsMeasurementIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Measurement.
   *
   * Update a measurement
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateMeasurementMeasurementsMeasurementIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMeasurementMeasurementsMeasurementIdPut(params: UpdateMeasurementMeasurementsMeasurementIdPut$Params, context?: HttpContext): Observable<MeasurementOut> {
    return this.updateMeasurementMeasurementsMeasurementIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<MeasurementOut>): MeasurementOut => r.body)
    );
  }

  /** Path part for operation `deleteMeasurementMeasurementsMeasurementIdDelete()` */
  static readonly DeleteMeasurementMeasurementsMeasurementIdDeletePath = '/measurements/{measurement_id}';

  /**
   * Delete Measurement.
   *
   * Soft delete a measurement
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMeasurementMeasurementsMeasurementIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMeasurementMeasurementsMeasurementIdDelete$Response(params: DeleteMeasurementMeasurementsMeasurementIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteMeasurementMeasurementsMeasurementIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete Measurement.
   *
   * Soft delete a measurement
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMeasurementMeasurementsMeasurementIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMeasurementMeasurementsMeasurementIdDelete(params: DeleteMeasurementMeasurementsMeasurementIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.deleteMeasurementMeasurementsMeasurementIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `patchMeasurementMeasurementsMeasurementIdPatch()` */
  static readonly PatchMeasurementMeasurementsMeasurementIdPatchPath = '/measurements/{measurement_id}';

  /**
   * Patch Measurement.
   *
   * Patch a measurement (legacy endpoint)
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `patchMeasurementMeasurementsMeasurementIdPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  patchMeasurementMeasurementsMeasurementIdPatch$Response(params: PatchMeasurementMeasurementsMeasurementIdPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<MeasurementOut>> {
    return patchMeasurementMeasurementsMeasurementIdPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Patch Measurement.
   *
   * Patch a measurement (legacy endpoint)
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `patchMeasurementMeasurementsMeasurementIdPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  patchMeasurementMeasurementsMeasurementIdPatch(params: PatchMeasurementMeasurementsMeasurementIdPatch$Params, context?: HttpContext): Observable<MeasurementOut> {
    return this.patchMeasurementMeasurementsMeasurementIdPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<MeasurementOut>): MeasurementOut => r.body)
    );
  }

  /** Path part for operation `getMeasurementHistoryMeasurementsMeasurementIdHistoryGet()` */
  static readonly GetMeasurementHistoryMeasurementsMeasurementIdHistoryGetPath = '/measurements/{measurement_id}/history';

  /**
   * Get Measurement History.
   *
   * Get measurement history
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMeasurementHistoryMeasurementsMeasurementIdHistoryGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMeasurementHistoryMeasurementsMeasurementIdHistoryGet$Response(params: GetMeasurementHistoryMeasurementsMeasurementIdHistoryGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<{
[key: string]: any;
}>>> {
    return getMeasurementHistoryMeasurementsMeasurementIdHistoryGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Measurement History.
   *
   * Get measurement history
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMeasurementHistoryMeasurementsMeasurementIdHistoryGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMeasurementHistoryMeasurementsMeasurementIdHistoryGet(params: GetMeasurementHistoryMeasurementsMeasurementIdHistoryGet$Params, context?: HttpContext): Observable<Array<{
[key: string]: any;
}>> {
    return this.getMeasurementHistoryMeasurementsMeasurementIdHistoryGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<{
[key: string]: any;
}>>): Array<{
[key: string]: any;
}> => r.body)
    );
  }

  /** Path part for operation `processVoiceMeasurementMeasurementsVoicePost()` */
  static readonly ProcessVoiceMeasurementMeasurementsVoicePostPath = '/measurements/voice';

  /**
   * Process Voice Measurement.
   *
   * Procesa un transcript de voz para registrar una medición médica.
   *
   * Ejemplos de transcripts:
   * - "Tensión de Juan Pérez 120 80"
   * - "Oxígeno de María García 98"
   * - "Peso de Pedro López 75 kilos"
   * - "Temperatura de Ana Martínez 36.5"
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `processVoiceMeasurementMeasurementsVoicePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  processVoiceMeasurementMeasurementsVoicePost$Response(params: ProcessVoiceMeasurementMeasurementsVoicePost$Params, context?: HttpContext): Observable<StrictHttpResponse<VoiceMeasurementResponse>> {
    return processVoiceMeasurementMeasurementsVoicePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Process Voice Measurement.
   *
   * Procesa un transcript de voz para registrar una medición médica.
   *
   * Ejemplos de transcripts:
   * - "Tensión de Juan Pérez 120 80"
   * - "Oxígeno de María García 98"
   * - "Peso de Pedro López 75 kilos"
   * - "Temperatura de Ana Martínez 36.5"
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `processVoiceMeasurementMeasurementsVoicePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  processVoiceMeasurementMeasurementsVoicePost(params: ProcessVoiceMeasurementMeasurementsVoicePost$Params, context?: HttpContext): Observable<VoiceMeasurementResponse> {
    return this.processVoiceMeasurementMeasurementsVoicePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<VoiceMeasurementResponse>): VoiceMeasurementResponse => r.body)
    );
  }

  /** Path part for operation `confirmVoiceMeasurementMeasurementsVoiceConfirmPost()` */
  static readonly ConfirmVoiceMeasurementMeasurementsVoiceConfirmPostPath = '/measurements/voice/confirm';

  /**
   * Confirm Voice Measurement.
   *
   * Confirma y registra una medición después de resolver ambigüedad.
   * Se usa cuando el usuario selecciona manualmente el residente correcto.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `confirmVoiceMeasurementMeasurementsVoiceConfirmPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  confirmVoiceMeasurementMeasurementsVoiceConfirmPost$Response(params: ConfirmVoiceMeasurementMeasurementsVoiceConfirmPost$Params, context?: HttpContext): Observable<StrictHttpResponse<VoiceMeasurementResponse>> {
    return confirmVoiceMeasurementMeasurementsVoiceConfirmPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Confirm Voice Measurement.
   *
   * Confirma y registra una medición después de resolver ambigüedad.
   * Se usa cuando el usuario selecciona manualmente el residente correcto.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `confirmVoiceMeasurementMeasurementsVoiceConfirmPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  confirmVoiceMeasurementMeasurementsVoiceConfirmPost(params: ConfirmVoiceMeasurementMeasurementsVoiceConfirmPost$Params, context?: HttpContext): Observable<VoiceMeasurementResponse> {
    return this.confirmVoiceMeasurementMeasurementsVoiceConfirmPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<VoiceMeasurementResponse>): VoiceMeasurementResponse => r.body)
    );
  }

}
