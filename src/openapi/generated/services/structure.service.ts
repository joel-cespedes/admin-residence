/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { bedsStructureBedsRoomIdGet } from '../fn/structure/beds-structure-beds-room-id-get';
import { BedsStructureBedsRoomIdGet$Params } from '../fn/structure/beds-structure-beds-room-id-get';
import { floorsStructureFloorsResidenceIdGet } from '../fn/structure/floors-structure-floors-residence-id-get';
import { FloorsStructureFloorsResidenceIdGet$Params } from '../fn/structure/floors-structure-floors-residence-id-get';
import { roomsStructureRoomsFloorIdGet } from '../fn/structure/rooms-structure-rooms-floor-id-get';
import { RoomsStructureRoomsFloorIdGet$Params } from '../fn/structure/rooms-structure-rooms-floor-id-get';

@Injectable({ providedIn: 'root' })
export class StructureService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `floorsStructureFloorsResidenceIdGet()` */
  static readonly FloorsStructureFloorsResidenceIdGetPath = '/structure/floors/{residence_id}';

  /**
   * Floors.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `floorsStructureFloorsResidenceIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  floorsStructureFloorsResidenceIdGet$Response(params: FloorsStructureFloorsResidenceIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return floorsStructureFloorsResidenceIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Floors.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `floorsStructureFloorsResidenceIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  floorsStructureFloorsResidenceIdGet(params: FloorsStructureFloorsResidenceIdGet$Params, context?: HttpContext): Observable<any> {
    return this.floorsStructureFloorsResidenceIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `roomsStructureRoomsFloorIdGet()` */
  static readonly RoomsStructureRoomsFloorIdGetPath = '/structure/rooms/{floor_id}';

  /**
   * Rooms.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `roomsStructureRoomsFloorIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomsStructureRoomsFloorIdGet$Response(params: RoomsStructureRoomsFloorIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return roomsStructureRoomsFloorIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Rooms.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `roomsStructureRoomsFloorIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  roomsStructureRoomsFloorIdGet(params: RoomsStructureRoomsFloorIdGet$Params, context?: HttpContext): Observable<any> {
    return this.roomsStructureRoomsFloorIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `bedsStructureBedsRoomIdGet()` */
  static readonly BedsStructureBedsRoomIdGetPath = '/structure/beds/{room_id}';

  /**
   * Beds.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bedsStructureBedsRoomIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  bedsStructureBedsRoomIdGet$Response(params: BedsStructureBedsRoomIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return bedsStructureBedsRoomIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Beds.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bedsStructureBedsRoomIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bedsStructureBedsRoomIdGet(params: BedsStructureBedsRoomIdGet$Params, context?: HttpContext): Observable<any> {
    return this.bedsStructureBedsRoomIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

}
