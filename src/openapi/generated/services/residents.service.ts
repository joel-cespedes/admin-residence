/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { changeBedResidentsResidentIdBedPatch } from '../fn/residents/change-bed-residents-resident-id-bed-patch';
import { ChangeBedResidentsResidentIdBedPatch$Params } from '../fn/residents/change-bed-residents-resident-id-bed-patch';
import { createResidentResidentsPost } from '../fn/residents/create-resident-residents-post';
import { CreateResidentResidentsPost$Params } from '../fn/residents/create-resident-residents-post';
import { listResidentsResidentsGet } from '../fn/residents/list-residents-residents-get';
import { ListResidentsResidentsGet$Params } from '../fn/residents/list-residents-residents-get';
import { ResidentOut } from '../models/resident-out';

@Injectable({ providedIn: 'root' })
export class ResidentsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `listResidentsResidentsGet()` */
  static readonly ListResidentsResidentsGetPath = '/residents';

  /**
   * List Residents.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listResidentsResidentsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  listResidentsResidentsGet$Response(
    params?: ListResidentsResidentsGet$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<Array<ResidentOut>>> {
    return listResidentsResidentsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * List Residents.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listResidentsResidentsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listResidentsResidentsGet(
    params?: ListResidentsResidentsGet$Params,
    context?: HttpContext,
  ): Observable<Array<ResidentOut>> {
    return this.listResidentsResidentsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ResidentOut>>): Array<ResidentOut> => r.body),
    );
  }

  /** Path part for operation `createResidentResidentsPost()` */
  static readonly CreateResidentResidentsPostPath = '/residents';

  /**
   * Create Resident.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createResidentResidentsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createResidentResidentsPost$Response(
    params: CreateResidentResidentsPost$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<ResidentOut>> {
    return createResidentResidentsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Resident.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createResidentResidentsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createResidentResidentsPost(
    params: CreateResidentResidentsPost$Params,
    context?: HttpContext,
  ): Observable<ResidentOut> {
    return this.createResidentResidentsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<ResidentOut>): ResidentOut => r.body),
    );
  }

  /** Path part for operation `changeBedResidentsResidentIdBedPatch()` */
  static readonly ChangeBedResidentsResidentIdBedPatchPath = '/residents/{resident_id}/bed';

  /**
   * Change Bed.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changeBedResidentsResidentIdBedPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeBedResidentsResidentIdBedPatch$Response(
    params: ChangeBedResidentsResidentIdBedPatch$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<ResidentOut>> {
    return changeBedResidentsResidentIdBedPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Change Bed.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changeBedResidentsResidentIdBedPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changeBedResidentsResidentIdBedPatch(
    params: ChangeBedResidentsResidentIdBedPatch$Params,
    context?: HttpContext,
  ): Observable<ResidentOut> {
    return this.changeBedResidentsResidentIdBedPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<ResidentOut>): ResidentOut => r.body),
    );
  }
}
