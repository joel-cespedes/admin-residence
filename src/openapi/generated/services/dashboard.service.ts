/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { DashboardData } from '../models/dashboard-data';
import { DeviceStats } from '../models/device-stats';
import { getDashboardActivityDashboardActivityGet } from '../fn/dashboard/get-dashboard-activity-dashboard-activity-get';
import { GetDashboardActivityDashboardActivityGet$Params } from '../fn/dashboard/get-dashboard-activity-dashboard-activity-get';
import { getDashboardDataDashboardGet } from '../fn/dashboard/get-dashboard-data-dashboard-get';
import { GetDashboardDataDashboardGet$Params } from '../fn/dashboard/get-dashboard-data-dashboard-get';
import { getDevicesStatsDashboardDevicesStatsGet } from '../fn/dashboard/get-devices-stats-dashboard-devices-stats-get';
import { GetDevicesStatsDashboardDevicesStatsGet$Params } from '../fn/dashboard/get-devices-stats-dashboard-devices-stats-get';
import { getMeasurementsStatsDashboardMeasurementsStatsGet } from '../fn/dashboard/get-measurements-stats-dashboard-measurements-stats-get';
import { GetMeasurementsStatsDashboardMeasurementsStatsGet$Params } from '../fn/dashboard/get-measurements-stats-dashboard-measurements-stats-get';
import { getResidentsStatsDashboardResidentsStatsGet } from '../fn/dashboard/get-residents-stats-dashboard-residents-stats-get';
import { GetResidentsStatsDashboardResidentsStatsGet$Params } from '../fn/dashboard/get-residents-stats-dashboard-residents-stats-get';
import { getTasksStatsDashboardTasksStatsGet } from '../fn/dashboard/get-tasks-stats-dashboard-tasks-stats-get';
import { GetTasksStatsDashboardTasksStatsGet$Params } from '../fn/dashboard/get-tasks-stats-dashboard-tasks-stats-get';
import { MeasurementStats } from '../models/measurement-stats';
import { ResidentStats } from '../models/resident-stats';
import { TaskStats } from '../models/task-stats';

@Injectable({ providedIn: 'root' })
export class DashboardService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getDashboardDataDashboardGet()` */
  static readonly GetDashboardDataDashboardGetPath = '/dashboard/';

  /**
   * Get Dashboard Data.
   *
   * Get complete dashboard data
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDashboardDataDashboardGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDashboardDataDashboardGet$Response(params?: GetDashboardDataDashboardGet$Params, context?: HttpContext): Observable<StrictHttpResponse<DashboardData>> {
    return getDashboardDataDashboardGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Dashboard Data.
   *
   * Get complete dashboard data
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDashboardDataDashboardGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDashboardDataDashboardGet(params?: GetDashboardDataDashboardGet$Params, context?: HttpContext): Observable<DashboardData> {
    return this.getDashboardDataDashboardGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<DashboardData>): DashboardData => r.body)
    );
  }

  /** Path part for operation `getResidentsStatsDashboardResidentsStatsGet()` */
  static readonly GetResidentsStatsDashboardResidentsStatsGetPath = '/dashboard/residents/stats';

  /**
   * Get Residents Stats.
   *
   * Get resident statistics only
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getResidentsStatsDashboardResidentsStatsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getResidentsStatsDashboardResidentsStatsGet$Response(params?: GetResidentsStatsDashboardResidentsStatsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<ResidentStats>> {
    return getResidentsStatsDashboardResidentsStatsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Residents Stats.
   *
   * Get resident statistics only
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getResidentsStatsDashboardResidentsStatsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getResidentsStatsDashboardResidentsStatsGet(params?: GetResidentsStatsDashboardResidentsStatsGet$Params, context?: HttpContext): Observable<ResidentStats> {
    return this.getResidentsStatsDashboardResidentsStatsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<ResidentStats>): ResidentStats => r.body)
    );
  }

  /** Path part for operation `getMeasurementsStatsDashboardMeasurementsStatsGet()` */
  static readonly GetMeasurementsStatsDashboardMeasurementsStatsGetPath = '/dashboard/measurements/stats';

  /**
   * Get Measurements Stats.
   *
   * Get measurement statistics only
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMeasurementsStatsDashboardMeasurementsStatsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMeasurementsStatsDashboardMeasurementsStatsGet$Response(params?: GetMeasurementsStatsDashboardMeasurementsStatsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<MeasurementStats>> {
    return getMeasurementsStatsDashboardMeasurementsStatsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Measurements Stats.
   *
   * Get measurement statistics only
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMeasurementsStatsDashboardMeasurementsStatsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMeasurementsStatsDashboardMeasurementsStatsGet(params?: GetMeasurementsStatsDashboardMeasurementsStatsGet$Params, context?: HttpContext): Observable<MeasurementStats> {
    return this.getMeasurementsStatsDashboardMeasurementsStatsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<MeasurementStats>): MeasurementStats => r.body)
    );
  }

  /** Path part for operation `getTasksStatsDashboardTasksStatsGet()` */
  static readonly GetTasksStatsDashboardTasksStatsGetPath = '/dashboard/tasks/stats';

  /**
   * Get Tasks Stats.
   *
   * Get task statistics only
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTasksStatsDashboardTasksStatsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTasksStatsDashboardTasksStatsGet$Response(params?: GetTasksStatsDashboardTasksStatsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskStats>> {
    return getTasksStatsDashboardTasksStatsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Tasks Stats.
   *
   * Get task statistics only
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTasksStatsDashboardTasksStatsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTasksStatsDashboardTasksStatsGet(params?: GetTasksStatsDashboardTasksStatsGet$Params, context?: HttpContext): Observable<TaskStats> {
    return this.getTasksStatsDashboardTasksStatsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskStats>): TaskStats => r.body)
    );
  }

  /** Path part for operation `getDevicesStatsDashboardDevicesStatsGet()` */
  static readonly GetDevicesStatsDashboardDevicesStatsGetPath = '/dashboard/devices/stats';

  /**
   * Get Devices Stats.
   *
   * Get device statistics only
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDevicesStatsDashboardDevicesStatsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDevicesStatsDashboardDevicesStatsGet$Response(params?: GetDevicesStatsDashboardDevicesStatsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<DeviceStats>> {
    return getDevicesStatsDashboardDevicesStatsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Devices Stats.
   *
   * Get device statistics only
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDevicesStatsDashboardDevicesStatsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDevicesStatsDashboardDevicesStatsGet(params?: GetDevicesStatsDashboardDevicesStatsGet$Params, context?: HttpContext): Observable<DeviceStats> {
    return this.getDevicesStatsDashboardDevicesStatsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<DeviceStats>): DeviceStats => r.body)
    );
  }

  /** Path part for operation `getDashboardActivityDashboardActivityGet()` */
  static readonly GetDashboardActivityDashboardActivityGetPath = '/dashboard/activity';

  /**
   * Get Dashboard Activity.
   *
   * Get recent activity only
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDashboardActivityDashboardActivityGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDashboardActivityDashboardActivityGet$Response(params?: GetDashboardActivityDashboardActivityGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<{
[key: string]: any;
}>>> {
    return getDashboardActivityDashboardActivityGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Dashboard Activity.
   *
   * Get recent activity only
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDashboardActivityDashboardActivityGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDashboardActivityDashboardActivityGet(params?: GetDashboardActivityDashboardActivityGet$Params, context?: HttpContext): Observable<Array<{
[key: string]: any;
}>> {
    return this.getDashboardActivityDashboardActivityGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<{
[key: string]: any;
}>>): Array<{
[key: string]: any;
}> => r.body)
    );
  }

}
