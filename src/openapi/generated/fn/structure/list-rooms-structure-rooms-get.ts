/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { PaginatedResponseRoomOut } from '../../models/paginated-response-room-out';

export interface ListRoomsStructureRoomsGet$Params {

/**
 * Filter by residence ID
 */
  residence_id?: (string | null);

/**
 * Filter by floor ID
 */
  floor_id?: (string | null);
  search?: (string | null);
  page?: number;
  size?: number;
  sort_by?: (string | null);
  sort_order?: ('asc' | 'desc' | null);
  date_from?: (string | null);
  date_to?: (string | null);
  status?: (string | null);
  type?: (string | null);
}

export function listRoomsStructureRoomsGet(http: HttpClient, rootUrl: string, params?: ListRoomsStructureRoomsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<PaginatedResponseRoomOut>> {
  const rb = new RequestBuilder(rootUrl, listRoomsStructureRoomsGet.PATH, 'get');
  if (params) {
    rb.query('residence_id', params.residence_id, {});
    rb.query('floor_id', params.floor_id, {});
    rb.query('search', params.search, {});
    rb.query('page', params.page, {});
    rb.query('size', params.size, {});
    rb.query('sort_by', params.sort_by, {});
    rb.query('sort_order', params.sort_order, {});
    rb.query('date_from', params.date_from, {});
    rb.query('date_to', params.date_to, {});
    rb.query('status', params.status, {});
    rb.query('type', params.type, {});
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<PaginatedResponseRoomOut>;
    })
  );
}

listRoomsStructureRoomsGet.PATH = '/structure/rooms';
