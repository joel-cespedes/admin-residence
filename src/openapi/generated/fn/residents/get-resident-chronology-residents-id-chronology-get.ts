/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { ResidentChronologyResponse } from '../../models/resident-chronology-response';

export interface GetResidentChronologyResidentsIdChronologyGet$Params {
  id: string;

/**
 * Incluir mediciones
 */
  include_measurements?: boolean;

/**
 * Incluir tareas
 */
  include_tasks?: boolean;

/**
 * Incluir cambios de cama
 */
  include_bed_changes?: boolean;

/**
 * Incluir cambios de estado
 */
  include_status_changes?: boolean;

/**
 * Fecha desde
 */
  date_from?: (string | null);

/**
 * Fecha hasta
 */
  date_to?: (string | null);

/**
 * LÃ­mite de eventos
 */
  limit?: number;

/**
 * Filter by residence ID
 */
  residence_id?: (string | null);
}

export function getResidentChronologyResidentsIdChronologyGet(http: HttpClient, rootUrl: string, params: GetResidentChronologyResidentsIdChronologyGet$Params, context?: HttpContext): Observable<StrictHttpResponse<ResidentChronologyResponse>> {
  const rb = new RequestBuilder(rootUrl, getResidentChronologyResidentsIdChronologyGet.PATH, 'get');
  if (params) {
    rb.path('id', params.id, {});
    rb.query('include_measurements', params.include_measurements, {});
    rb.query('include_tasks', params.include_tasks, {});
    rb.query('include_bed_changes', params.include_bed_changes, {});
    rb.query('include_status_changes', params.include_status_changes, {});
    rb.query('date_from', params.date_from, {});
    rb.query('date_to', params.date_to, {});
    rb.query('limit', params.limit, {});
    rb.query('residence_id', params.residence_id, {});
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<ResidentChronologyResponse>;
    })
  );
}

getResidentChronologyResidentsIdChronologyGet.PATH = '/residents/{id}/chronology';
